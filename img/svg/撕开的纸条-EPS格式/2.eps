%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.1
%%For: (Administrator) ()
%%Title: (1114.eps)
%%CreationDate: 7/30/2009 7:29 AM
%%BoundingBox: -100 0 701 600
%%HiResBoundingBox: -100 0 700.0186 600
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKProcessColor: 1 1 1 1 ([Registra\750n\755])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 300.5 299.5 300.5 299.5
%AI3_TileBox: -108.8398 14.4004 708.8398 585.6001
%AI3_DocumentPreview: Header
%AI5_ArtSize: 800 600
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 0 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -226.3828 691.3901 0.6667 720 667 18 0 0 67 71 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-112 -12
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRider
currentpacking true setpacking
setpacking
%AI3_EndRider
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Z\341suvn\375 modul Adobe Prolnut\355) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symboly) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Vektorizace) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Z\341suvn\375 modul Adobe \212t\354tec se vzorkem) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Z\341suvn\375 modul Adobe \212t\354tec se vzorkem) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Z\341suvn\375 modul Adobe Objektov\375 \232t\354tec) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Z\341suvn\375 modul Adobe Objektov\375 \232t\354tec) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Z\341suvn\375 modul Adobe Kaligrafick\375 \232t\354tec) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Z\341suvn\375 modul Adobe Rozs\351vac\355 \232t\354tec) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Z\341suvn\375 modul Adobe Rozs\351vac\355 \232t\354tec) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Slo\236en\375 tvar Adobe) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Z\341suvn\375 modul Adobe Ob\341lky) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Z\341suvn\375 modul \236iv\351 malby Adobe) (Live Paint.aip)
%AI5_End_NonPrinting--
8 Bn
%AI5_BeginGradient: (Unnamed gradient 2)
(Unnamed gradient 2) 0 2 Bd
[
<
2B2B2A2928282726252423222120201F1E1C1C1B1A1918171514131312110F0E0D0C0B
>
<
FAFAFAFAFAFBFBFBFBFCFCFCFCFCFCFCFCFBFBFBFBFAFBFBFBFBFBFBFBFBFBFBFBFBFB
>
<
ECEDEFEFEFF1F1F2F4F4F4F6F7F7F9F9FAFAFCFDFDFFFFFEFFFFFFFFFFFFFFFFFFFFFF
>
<
1110100F0E0D0D0C0B0A09090808070706050504040303030302020202010101010101
>
<
C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4
>
<
2727272727262626262626262625252525252525252524242424242424242323232323
>
<
2D2D2C2C2C2B2B2B2A2A2A292929282828282727272626262525252424242323232222
>
4 %_Br
[
0.043137 0.984314 1 0.003922 0.894118 0.137255 0.133333 2 50 100 %_BS
%_0.043137 0.984314 1 0.003922 0.894118 0.137255 0.133333 2 50 100 Bs
0.168627 0.980392 0.92549 0.066667 0.756863 0.152941 0.176471 2 50 0 %_BS
%_0.168627 0.980392 0.92549 0.066667 0.756863 0.152941 0.176471 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 46)
(Unnamed gradient 46) 0 2 Bd
[
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000101010102020202030304040405050505060707
0809090A0A0B0C0C0D0E10121313151618191B1C1E2021232527292B
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000010101020201020203030303040405
04050605060708090A0B0B0C0C0D0E0E10111113131518181A1B1D1F
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000001010101020202020202030203030404
050505060707070809090A0B0C0D0F10101114131616181A1B1C1E20
>
0
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFBFBFBFBFAFAF9F9F9F8F8F7F7F6F5F5
F4F3F3F2F1F0EFEFEEEDECEAE9E8E7E6E4E3E1E0DEDCDBD9D7D5D3D1
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFBFBFBFAFAFAF9F9F8F8F7F7F6F6F5
F5F4F3F3F2F1F0EFEEEDECEBEAE9E8E7E5E4E3E1E0DEDCDBD9D7D5D3
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFBFBFBFAFAFAF9F9F9F8F8F7F7F6F6
F5F4F4F3F2F1F1F0EFEEEDECEBEAE8E7E6E5E3E2E0DFDDDBDAD8D6D4
>
4 %_Br
[
0.8 0 50 100 %_BS
%_0.8 0 50 100 Bs
0 0 0 0 1 1 1 2 87 0 %_BS
%_0 0 0 0 1 1 1 2 87 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 47)
(Unnamed gradient 47) 0 2 Bd
[
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000101010102020202030304040405050505060707
0809090A0A0B0C0C0D0E10121313151618191B1C1E2021232527292B
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000010101020201020203030303040405
04050605060708090A0B0B0C0C0D0E0E10111113131518181A1B1D1F
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000001010101020202020202030203030404
050505060707070809090A0B0C0D0F10101114131616181A1B1C1E20
>
0
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFBFBFBFBFAFAF9F9F9F8F8F7F7F6F5F5
F4F3F3F2F1F0EFEFEEEDECEAE9E8E7E6E4E3E1E0DEDCDBD9D7D5D3D1
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFBFBFBFAFAFAF9F9F8F8F7F7F6F6F5
F5F4F3F3F2F1F0EFEEEDECEBEAE9E8E7E5E4E3E1E0DEDCDBD9D7D5D3
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFBFBFBFAFAFAF9F9F9F8F8F7F7F6F6
F5F4F4F3F2F1F1F0EFEEEDECEBEAE8E7E6E5E3E2E0DFDDDBDAD8D6D4
>
4 %_Br
[
0.8 0 50 100 %_BS
%_0.8 0 50 100 Bs
0 0 0 0 1 1 1 2 87 0 %_BS
%_0 0 0 0 1 1 1 2 87 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 48)
(Unnamed gradient 48) 0 2 Bd
[
<
73737373737373737373737373737373737373737373737373737373737373737373737373737373
73737373737373737373737373737374747474747474747474747474747575757575757576767676
7676777777777878787979797A7A7A7B7B7C7C7C7D7D7E7F7F80808182818283838485868788898A
8B8B8C8D8E8E8F9191929495969799999B9D9D9E9FA1A2A3
>
<
5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C
5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5D5D5D5D5D5D5D5D5D5D5D5D5D5D5E5E5E5E5E5E5E5F5F5F5F
5F605F5F5F61606060616161626262636364646565666667676869696A6B6A6B6D6D6C6D6E6F7071
71727374777778787B7B7B7E7E80808284848687898B8C8E
>
<
59595959595959595959595959595959595959595959595959595959595959595959595959595959
5959595959595959595959595959595A5A5A5A5A5A5A5A5A5A5A5A5A5B5A5A5A5A5A5A5A5B5B5B5B
5B5C5C5C5C5D5D5D5D5E5E5E5E5E605F5F60606161616262646364646566676667686A6A6B6A6B6C
6C6F6F707071717473767776797A7B7C7E7F808182848586
>
<
03030303030303030303030303030303030303030303030303030303030303030303030303030303
03030303030303030303030303030304040404040404040404040404040404040404040405050505
05050505050505050506060606060707070808080909090A0A0B0B0B0C0D0E0E0F10101112131415
161718191B1C1D1F21232426282B2C2F323336393C404346
>
<
93939393939393939393939393939393939393939393939393939393939393939393939393939393
93939393939393939393939393939392929292929292929292929292929191919191919190909090
90908F8F8F8F8E8E8E8D8D8D8C8C8C8B8B8A8A8A8989888787868685848483828281807F7E7D7C7B
7A7978777675747271706E6D6B6A6867656362605E5C5A58
>
<
95959595959595959595959595959595959595959595959595959595959595959595959595959595
95959595959595959595959595959594949494949494949494949494949393939393939392929292
9291919191909090908F8F8F8E8E8E8D8D8C8C8B8B8A8A89898887878685858483828281807F7E7D
7C7B7A79777675747271706E6D6B6A68666563615F5D5B59
>
<
98989898989898989898989898989898989898989898989898989898989898989898989898989898
98989898989898989898989898989897979797979797979797979797969696969696969695959595
95949494949393939392929291919090908F8F8E8E8D8D8C8B8B8A8A898887878685848382828180
7F7D7C7B7A797876757372716F6D6C6A68676563615F5D5B
>
4 %_Br
[
0.2 0 50 100 %_BS
%_0.2 0 50 100 Bs
0.5 0 87 0 %_BS
%_0.5 0 87 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 52)
(Unnamed gradient 52) 0 2 Bd
[
<
2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B
2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2C2C2C2C2C2C2C2C2C2C2C2C2C2D2D2D2D2D2D2D2D2E2E2E
2E2E3030303031313131323232343435353536363737383839393A3B3C3C3D3E3F40414242444546
4748494A4C4E4F5051535556585A5C5E61636467696B6D6F7173
>
<
1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F
1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F202020202020202020202020202120202020202020212121
212122222222232323232424242626272626282829292A292A2A2B2C2C2D2E2E2F30313232333435
36373838393C3C3D3E414243454648494C4E4F51535557585A5C
>
<
20202020202020202020202020202020202020202020202020202020202020202020202020202020
20202020202020202020202020202020202020202020202020202020202021212121212121222222
22222323232323242424252525272726282829292829292A2A2B2C2B2D2C2D2F302F303133343534
353637383A3B3C3C3D3F4142444547484B4B4E4F505253555759
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000010101010102020203
>
<
D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1
D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D0D0D0D0D0D0D0D0D0D0D0D0D0CFCFCFCFCFCFCFCFCECECE
CECECDCDCDCDCCCCCCCCCBCBCBCACAC9C9C9C8C8C7C7C6C6C5C5C4C3C3C2C1C1C0BFBEBDBDBCBBBA
B9B8B7B6B5B3B2B1B0AEADACAAA9A7A6A4A2A19F9D9B99979593
>
<
D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3
D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D2D2D2D2D2D2D2D2D2D2D2D2D2D1D1D1D1D1D1D1D1D0D0D0
D0D0CFCFCFCFCECECECECDCDCDCCCCCBCBCBCACAC9C9C8C8C7C7C6C5C5C4C3C3C2C1C0BFBFBEBDBC
BBBAB9B8B7B5B4B3B2B0AFAEACABA9A8A6A4A3A19F9D9B999795
>
<
D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4
D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D3D3D3D3D3D3D3D3D3D3D3D3D3D3D2D2D2D2D2D2D2D1D1D1
D1D1D0D0D0D0D0CFCFCFCECECECDCDCDCCCCCBCBCBCACAC9C9C8C7C7C6C6C5C4C3C3C2C1C0BFBEBE
BDBCBBBAB8B7B6B5B4B2B1B0AEADABAAA8A7A5A3A2A09E9C9A98
>
4 %_Br
[
0.5 0 50 100 %_BS
%_0.5 0 50 100 Bs
0.8 0 87 0 %_BS
%_0.8 0 87 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 78)
(Unnamed gradient 78) 0 7 Bd
[
<
A2A0A09E9D9C9A9998979594939291908F8E8D8E8C8B8A8989888787868685848483838382828181
818080807F7F7F7F7F7E7E7E7E7E7D7D7D7D7D7D7D7D7D7D7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C
7C7C7C7C7C7C7C7C7C7C7C7C
>
<
7E7E7B7B7A777777767574717070716F6E6D6D6B6C6B6A6969686767666665666464636363626263
61616160606060615F606060605E5F5F5F5F5F5F5F5F5F5D5E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5E
5E5E5E5E5E5E5E5E5E5E5E5E
>
<
6D6C6B6A696A676666656464646361626161605F5F5E5E5F5D5C5D5B5C5B5C5A5B5B5A5A58595957
58585857575757555656565656565555555555555555555555555555555555555555555555555555
555555555555555555555555
>
<
22201E1D1C1A191817161413121110100F0E0E0D0D0C0B0B0A090909090808080707070706060606
06060605050505050505050505040404040404040404040404040404040404040404040404040404
040404040404040404040404
>
<
646667696A6B6D6E6F7072737475767778797A7A7B7C7D7E7E7F8080818182838384848485858686
86878787888888888889898989898A8A8A8A8A8A8A8A8A8A8B8B8B8B8B8B8B8B8B8B8B8B8B8B8B8B
8B8B8B8B8B8B8B8B8B8B8B8B
>
<
6E6F71727375767778797A7C7D7E7E7F80818283838485868687888889898A8A8B8B8C8C8C8D8D8D
8E8E8E8F8F8F8F8F9090909090919191919191919191919292929292929292929292929292929292
929292929292929292929292
>
<
77787A7B7C7D7F80818283848586878788898A8B8B8C8D8D8E8F8F90909191929292939394949495
95959596969696979797979797989898989898989898989999999999999999999999999999999999
999999999999999999999999
>
4 %_Br
<
4C4E4F5051525354555758595A5C5D5D5E6061636465666868696A6B6C6D6D6E6F70717272737476
76777879797A7B7C7C7D7E7E7F808181828383848485868687888889898A8B8B8C8C8D8D8E8E8F8F
909091919292939394949595969696979798989899999A9A9A9B9B9B9C9C9C9D9D9D9D9E9E9E9F9F
9E9EA0A0A09F9FA1A1A1A1A0A0A1A1A1A1A1A1A1A1A2A2A2A2A2A2A2A2A2A2A2
>
<
38393A3B3C3D3C3D3E3F4142434443454647484A4B4A4B4D4E4F4E50515252525354545556575758
59595A5B5C5C5C5D5D5E605F60606162626364646564666567686869696A696A6A6B6B6C6C6D6D6E
6D6F6E7070717072717172727373737474767575777675777776787877797978787A7A79797B7A7A
7A7C7B7B7B7B7D7C7C7C7C7C7E7D7D7D7D7D7D7D7D7E7E7E7E7E7E7E7E7E7E7E
>
<
37373839393A3C3C3D3D3E3F404141424344454546484948494A4C4B4C4D4D4E4F4E505150515352
52545354555556565657565859595A595B5A5B5B5B5D5C5E5D5E5E5F5F5F5F606061616162616261
636264636363646464646565666666676766676766686867696968686A69696A6A69696B6B6A6A6A
6C6B6B6B6B6C6B6B6B6B6B6D6C6C6C6C6C6C6C6C6E6D6D6D6D6D6D6D6D6D6D6D
>
<
00000000000000000000000000000000000000000000000101010101010101010101010202020202
020203030303040404040505050506060707070708080909090A0A0B0B0C0C0C0D0D0D0E0E0E0F0F
10101111111212131313141415151516161717171818181919191A1A1A1B1B1C1C1C1C1D1D1D1D1D
1E1E1E1E1E1F1F1F1F1F1F202021212121212121212222222222222222222222
>
<
B4B3B2B1B0AFAEADACABAAA9A8A7A6A6A5A4A3A2A1A09F9E9E9D9C9B9A9999989796959494939291
91908F8E8E8D8C8B8B8A8989888786868584848383828181807F7F7E7E7D7C7C7B7B7A7A79797878
77777676757574747373727271717170706F6F6F6E6E6D6D6D6C6C6C6B6B6B6A6A6A6A6969696868
6868676767676766666666666665656565656565656464646464646464646464
>
<
B8B7B6B5B4B3B3B2B1B0AFAEADACACABAAA9A8A7A6A6A5A4A3A2A2A1A09F9F9E9D9C9C9B9A999998
9797969594949392929190908F8F8E8D8D8C8B8B8A8A898988878786868585848483838282818180
807F7F7E7E7D7D7C7C7C7B7B7A7A7A79797878787777777676767575757474747473737373727272
7271717171717070707070706F6F6F6F6F6F6F6F6F6E6E6E6E6E6E6E6E6E6E6E
>
<
BBBAB9B8B8B7B6B5B4B4B3B2B1B0B0AFAEADACACABAAA9A9A8A7A6A6A5A4A4A3A2A2A1A0A09F9E9E
9D9C9C9B9A9A99989897979695959494939392929190908F8F8E8E8D8D8C8C8B8B8A8A8989898888
8787868686858584848483838282828181818080807F7F7F7E7E7E7E7D7D7D7C7C7C7C7B7B7B7B7B
7A7A7A7A7A797979797979787878787878787878777777777777777777777777
>
4 %_Br
<
39393B3B3C3C3D3E3E3F404141424344464748494A4B4C
>
<
282829292A292A2B2B2C2D2E2E2F303132333435363738
>
<
2A2A2B2B2A2C2D2C2E2D2E2E302F303132333234353637
>
0
<
C5C5C4C4C3C3C2C1C1C0BFBEBEBDBCBBBAB9B8B7B6B5B4
>
<
C9C9C8C8C7C7C6C5C5C4C3C2C2C1C0BFBEBDBCBBBAB9B8
>
<
CACAC9C9C9C8C7C7C6C6C5C4C3C3C2C1C0BFBFBEBDBCBB
>
4 %_Br
<
4C4B4A4948474645444342414140403F3E3E3D3D3D3C3C3B3B3B3B393939393939
>
<
383736353433323231302F2E2E2D2D2C2B2B2A2A2A292929292929282828282828
>
<
373635343433323031302F302E2E2E2D2E2C2D2D2B2C2C2B2B2B2B2A2A2A2A2A2A
>
0
<
B4B5B6B7B8B9BABABBBCBDBEBEBFBFC0C1C1C2C2C2C3C3C4C4C4C4C5C5C5C5C5C5
>
<
B8B9BABBBCBDBEBEBFC0C1C2C2C3C3C4C5C5C6C6C6C7C7C8C8C8C8C9C9C9C9C9C9
>
<
BBBCBDBEBEBFC0C1C1C2C3C3C4C5C5C6C6C7C7C7C8C8C8C9C9C9C9CACACACACACA
>
4 %_Br
<
A2A2A2A2A2A1A1A1A1A0A1A1A19FA0A09E9E9F9E9E9D9D9D9C9C9B9B9A9A99999898979796969595
94949392929191908F8F8E8D8D8C8B8B8A89898887878685858483828281807F7F7E7D7C7C7B7A79
787777757473727271706F6E6D6C6B6B6A69686665646361605E5E5D5C5A5958575554535251504F
4E4C
>
<
7E7E7E7E7E7D7D7D7D7E7C7C7C7B7B7B7C7A7A7B797A787879777876777776777575747473737272
7171707170706F6D6E6D6D6C6B6B6A6B6A6969686667666665636463626161605F605E5D5C5C5C5B
5B5A59585757565554545352525151504F4E4C4B4C4B4A4847464445444342413F3E3D3C3D3C3B3A
3938
>
<
6D6D6D6D6D6C6C6C6C6C6B6B6B6C6B6B6B6C6A6A6B696A6A696A6869696768666767676766666565
6464646363636263616261616161605E5F5F5F5E5F5D5C5C5C5C5B5A5B5A58595856575656565554
5453535353515051504E4F4E4D4C4C4B4A494A49474646454443424241403F3E3E3D3C3C3A393938
3737
>
<
222222222221212121201F1F1F1F1E1E1E1E1D1D1D1C1C1C1B1A1A19191918181717161615151414
13131212111110100F0F0E0E0D0D0C0C0C0B0B0A0A09090908080707070606050505040404040303
03020202020202020101010101010101010101000000000000000000000000000000000000000000
0000
>
<
6464646464656565656666666667676768686869696A6A6A6B6B6C6C6D6D6E6E6F6F707071717272
73737475757676777878797A7A7B7C7C7D7E7E7F80808182828384858586878888898A8B8B8C8D8E
8F9090919293949495969798999A9B9B9C9D9E9FA0A1A2A3A4A5A5A6A7A8A9AAABACADAEAFB0B1B2
B3B4
>
<
6E6E6E6E6E6F6F6F6F6F70707071717171727272737374747475757676767777787879797A7A7B7B
7C7C7D7D7E7E7F80808181828383848485868687888889898A8B8B8C8D8E8E8F9090919293939495
9596979899999A9B9C9C9D9E9FA0A0A1A2A3A4A5A5A6A7A8A9AAABABACADAEAFB0B1B2B3B3B4B5B6
B7B8
>
<
77777777777878787878797979797A7A7A7A7B7B7B7C7C7C7D7D7E7E7E7F7F808080818182828383
8484858586868787888889898A8A8B8C8C8D8D8E8E8F909091919293939495959697979899999A9B
9B9C9D9D9E9FA0A0A1A2A2A3A4A5A5A6A7A8A8A9AAABABACADAEAFAFB0B1B2B3B3B4B5B6B7B8B8B9
BABB
>
4 %_Br
<
B5B5B4B3B4B4B3B2B1B2B1B1AFAFAFAEAEAEADACACACABABAAA9AAA9A9A8A8A7A6A7A6A6A6A5A5A4
A5A5A3A4A4A3A3A3A3A2A2A2A2
>
<
959494939291939291908F8E8F8E8D8C8B8C8B89888A898788878686858684838483848282818282
81817F80807F7F7F7F7E7E7E7E
>
<
84848383838280807F7F7E7D7D7D7C7C7B79797A7977777876767575747274737372707270716F6F
6F6F706E6E6D6D6D6D6D6D6D6D
>
<
5452514F4D4B4A484745444242403F3D3B3A393837363434333130302F2E2D2C2C2B2A2928282727
26262524242323232322222222
>
<
4748494A4A4B4C4D4E4E4F50515252535454555656575858595A5A5B5B5C5C5D5E5E5F5F5F606061
61616262626363636364646464
>
<
4F5051525354545556575859595A5B5C5D5D5E5F60606162626364646565666767686869696A6A6A
6B6B6C6C6C6D6D6D6D6E6E6E6E
>
<
55565758595A5B5C5D5E5F606061626364656666676869696A6B6C6C6D6E6E6F6F70717172727373
74747475757676767677777777
>
4 %_Br
[
0.486274 0.368627 0.333333 0.015686 0.545098 0.572549 0.6 2 50 100 %_BS
%_0.486274 0.368627 0.333333 0.015686 0.545098 0.572549 0.6 2 50 100 Bs
0.635294 0.494118 0.427451 0.133333 0.392157 0.431373 0.466667 2 17.2414 79.6954 %_BS
%_0.635294 0.494118 0.427451 0.133333 0.392157 0.431373 0.466667 2 17.2414 79.6954 Bs
0.298039 0.219608 0.215686 0 0.705882 0.721569 0.733333 2 30.5556 50.2538 %_BS
%_0.298039 0.219608 0.215686 0 0.705882 0.721569 0.733333 2 30.5556 50.2538 Bs
0.223529 0.156863 0.164706 0 0.772549 0.788235 0.792157 2 60 44.6701 %_BS
%_0.223529 0.156863 0.164706 0 0.772549 0.788235 0.792157 2 60 44.6701 Bs
0.298039 0.219608 0.215686 0 0.705882 0.721569 0.733333 2 30 39.5939 %_BS
%_0.298039 0.219608 0.215686 0 0.705882 0.721569 0.733333 2 30 39.5939 Bs
0.635294 0.494118 0.427451 0.133333 0.392157 0.431373 0.466667 2 63.3333 7.61421 %_BS
%_0.635294 0.494118 0.427451 0.133333 0.392157 0.431373 0.466667 2 63.3333 7.61421 Bs
0.709804 0.584314 0.517647 0.329412 0.278431 0.309804 0.333333 2 35.7143 0.507614 %_BS
%_0.709804 0.584314 0.517647 0.329412 0.278431 0.309804 0.333333 2 35.7143 0.507614 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 80)
(Unnamed gradient 80) 0 3 Bd
[
<
3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3D3D3D3D3D3D3D3D3D3E3E3E3E3E3E3E3F3F3F3F3F3F3F
3F404040404041414141414142424343434344444445454546464646464747474848484849494949
4A4A4A4A4B4B4B4B4C4C4D4D4E4E4E4E4F4F505050515152525252
>
<
FDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFDFDFDFDFCFCFCFCFCFCFCFCFCFCFBFBFBFC
FCFCFCFCFBFBFBFBFBFBFCFCFCFCFBFBFBFBFBFCFCFCFCFCFCFCFBFBFCFCFCFCFBFBFBFCFBFBFBFB
FAFBFBFBFBFAFAFAFBFAFAF9F9F9F9F9F9F8F8F8F8F7F7F7F7F7F7
>
<
EFEFEFEFEFEFEFEFEFEFEEEEEEEEEEEEEEEDEDEDF0F0EFEFEFEFEEEEEEEEEDEDEDECECECEEEEEEEC
ECECECECEBEBEDEDEDEDEDEDEDEDEDF0EFEFEFEEEEEEF1F0EFEFEFEFEDF0F0EEEDECECEDECECEAE9
EBE9E9E8E6E5E7E7E7E6E6E8E7E6E6E6E8E7E6E4E6E5E3E2E3E1DF
>
<
2D2D2D2D2D2D2D2D2D2D2E2E2E2E2E2E2E2F2F2F2F2F303030303232323233333334343435353537
3738383839393A3A3C3C3D3D3E3E3F3F404042434344444546464848494A4A4C4D4E4E5051515354
55575758595B5C5C5D5F60626364666667696A6C6D6F7071737476
>
<
A5A5A5A5A5A5A5A5A5A5A4A4A4A4A4A4A4A3A3A3A3A3A2A2A2A2A1A1A1A1A0A0A09F9F9F9E9E9E9D
9D9C9C9C9B9B9A9A9999989897979696959594939392929190908F8F8E8D8D8C8B8A8A8988888786
85848483828180807F7E7D7C7B7A79797877767574737271706F6E
>
<
2121212121212121212121212121212121212121212120202020202020202020202020202020201F
1F1F1F1F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1D1D1C1C1C1C1C1C1C1B1B1B1B1B
1B1A1A1A1A1A1A1A19191919191818181818181717171717161616
>
<
27272727272727272727272727272727272727272626262626262626262626262626262625252525
25252525252524242424242424242423232323232323222222222222222121212121212020202020
1F1F1F1F1F1F1E1E1E1E1E1D1D1D1D1D1C1C1C1C1B1B1B1B1A1A1A
>
4 %_Br
<
5252525251515050504F4F4E4E4E4E4D4D4C4C4B4B4B4B4A4A4A4A49494949484848484747464646
4646454545444444434343434242414141414140404040403F3F3F3F3F3F3F3E3E3E3E3E3E3D3D3D
3D3D3D3D3D3C3C3C3C3C3C3C3C3C3C3C3C3C3C
>
<
F7F7F7F7F7F7F8F8F8F8F9F9F9F9F9F9FAFAFBFAFAFAFBFBFBFAFAFBFBFBFBFCFBFBFBFCFCFCFCFB
FCFCFCFCFCFCFCFBFBFBFBFBFCFCFCFCFBFBFBFBFBFBFCFCFCFCFBFBFBFCFCFCFCFCFCFCFCFDFDFD
FDFCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFD
>
<
DFE1E3E2E3E5E6E4E6E7E8E6E6E6E7E8E6E6E7E7E8E5E6E8E9EBE8E9EAECECEDECEDEDEEF0F1EDEF
EFEFF0F1EEEEEEEFEFEFF0EDEDEDEDEDEDEDEDEBEBEBECECECECEEEEEEECECEDEDEDEEEEEEEFEFEF
EFF0F0EDEDEEEEEEEEEEEEEFEFEFEFEFEFEFEF
>
<
76747371706F6D6C6A69676664646362605F5D5C5B5B595857555554535151504E4D4D4C4A494948
464645444443434240403F3F3E3E3D3D3C3A3A393939383837373535353434333333323232303030
302F2F2F2F2E2E2E2E2E2E2D2D2D2D2D2D2D2D
>
<
6E6F707172737475767778797A7A7B7C7D7E7F808181828384858586878888898A8B8B8C8D8E8E8F
90909192929393949595969697979898999A9A9B9B9B9C9C9D9D9E9E9E9F9FA0A0A0A1A1A1A2A2A2
A2A3A3A3A3A4A4A4A4A4A4A5A5A5A5A5A5A5A5
>
<
161616171717171718181818181819191919191A1A1A1A1A1A1B1B1B1B1B1B1B1C1C1C1C1C1C1C1D
1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1E1F1F1F1F1F1F1F1F1F1F2020202020202020202020202020
20212121212121212121212121212121212121
>
<
1A1A1A1B1B1B1B1C1C1C1C1D1D1D1D1D1E1E1E1E1E1F1F1F1F1F2020202020202121212121212222
22222222232323232323232424242424242424252525252525252525252626262626262626262626
26262627272727272727272727272727272727
>
4 %_Br
[
0.321569 0.968627 0.87451 0.462745 0.431373 0.086275 0.101961 2 50 100 %_BS
%_0.321569 0.968627 0.87451 0.462745 0.431373 0.086275 0.101961 2 50 100 Bs
0.235294 0.992157 0.937255 0.176471 0.647059 0.129412 0.152941 2 70.1031 51.269 %_BS
%_0.235294 0.992157 0.937255 0.176471 0.647059 0.129412 0.152941 2 70.1031 51.269 Bs
0.321569 0.968627 0.87451 0.462745 0.431373 0.086275 0.101961 2 32 0 %_BS
%_0.321569 0.968627 0.87451 0.462745 0.431373 0.086275 0.101961 2 32 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 81)
(Unnamed gradient 81) 0 4 Bd
[
<
0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0C0C0C0C0C0D0D0D0D0E0E0E0E0F10101111111212
121313131313141415151716181719181A1A1B1B1C1B1C1C1E1F1F20212121232324252526272728
292A2B2B2C2D2E30303133343536373738393A3C3C3D3F40414243
>
<
0707070707070707070707080808080808080809090909090A0A0A0A090B0B0B0C0B0B0B0C0C0C0D
0D0C0E0D0F0E0E0F0F100F11101211121213131413151416151617171818181A191A1B1B1C1D1D1D
1F1F1F2021222122242526262628292A2B2C2D2C2D2E2F30313233
>
<
0606060606060606060606070707070707070708080808080709090909090909090A0A0B0B0B0B0C
0C0C0D0D0C0E0E0E0F0E0F0E100F1110121113121313141315161517161819181A1A1A1B1B1B1D1E
1D1E201F202022232223252728272829292A2B2D2C2D2E2F303132
>
0
<
F1F1F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEDEDEDEDECECECEBEBEBEAEA
EAE9E9E8E8E8E7E7E6E6E5E5E4E4E3E3E2E2E1E1E0E0DFDFDEDDDDDCDBDBDAD9D9D8D7D7D6D5D5D4
D3D2D1D1D0CFCECDCDCCCBCAC9C8C7C7C6C5C4C3C2C1C0BFBEBDBC
>
<
F1F1F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEDEDEDECECECECEBEBEBEA
EAEAE9E9E8E8E8E7E7E6E6E5E5E4E4E3E3E2E2E1E1E0E0DFDFDEDDDDDCDCDBDADAD9D8D8D7D6D6D5
D4D3D3D2D1D0D0CFCECDCCCCCBCAC9C8C7C6C5C5C4C3C2C1C0BFBE
>
<
F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEEEEEEEEEDEDEDECECECEB
EBEBEAEAEAE9E9E8E8E8E7E7E6E6E5E5E4E4E3E3E2E2E1E1E0DFDFDEDEDDDCDCDBDADAD9D9D8D7D6
D6D5D4D4D3D2D1D0D0CFCECDCCCCCBCAC9C8C7C6C6C5C4C3C2C1C0
>
4 %_Br
<
434241403F3D3C3C3A393837363635343331302E2E2D2C2B2A2A292827262625242423212021201F
1F1E1E1C1B1C1B1B1A191917181617151514141313131313121212111110100F0E0E0E0E0D0D0D0C
0C0C0C0C0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A
>
<
333231302F2E2D2C2B2C2B2A2928272626252423212021201F1E1F1E1D1C1C1B1A1A191819181717
16151514151314131212111110110F100F0F0F0E0F0D0E0C0D0D0C0C0C0B0B0C0B0B0B090A0A0A09
09090909080808080808070707070707070707
>
<
3231302F2E2D2C2D2C2A292928272627252322212221201F1F1F1D1C1D1C1B1B1A191A1917181715
16151514131312131212111110100F0F0F0E0D0E0C0D0D0C0C0C0B0B0A0A0A090909090909090908
08080807070707070707060606060606060606
>
0
<
BCBDBEBFC0C1C2C3C4C5C6C7C8C8C9CACBCCCDCECECFD0D1D2D2D3D4D5D6D6D7D8D8D9DADBDBDCDD
DDDEDEDFE0E0E1E1E2E3E3E4E4E5E5E6E6E7E7E8E8E8E9E9EAEAEAEBEBECECECEDEDEDEDEEEEEEEF
EFEFEFEFF0F0F0F0F0F0F1F1F1F1F1F1F1F1F1
>
<
BEBFC0C1C2C3C4C5C6C6C7C8C9CACBCCCCCDCECFD0D1D1D2D3D4D4D5D6D7D7D8D9D9DADBDBDCDDDD
DEDFDFE0E0E1E1E2E3E3E4E4E5E5E6E6E7E7E7E8E8E9E9EAEAEAEBEBEBECECECEDEDEDEEEEEEEEEF
EFEFEFEFF0F0F0F0F0F0F1F1F1F1F1F1F1F1F1
>
<
C0C1C2C3C4C5C6C6C7C8C9CACBCCCDCDCECFD0D1D1D2D3D4D4D5D6D7D7D8D9D9DADBDBDCDDDDDEDF
DFE0E0E1E2E2E3E3E4E4E5E5E6E6E7E7E8E8E9E9EAEAEAEBEBEBECECEDEDEDEEEEEEEEEFEFEFEFF0
F0F0F0F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2
>
4 %_Br
<
858483828281807F7E7D7C7B7A7979787776757473727171706F6E6D6C6C6B6A6968686765646463
6261615F5E5E5C5B5B5A58585756565554535252515150504F4F4E4E4D4C4B4B4A4A494949484848
47474646464645454545454343434343
>
<
6D6C6B6B6A69686766656463626161605F5F5E5D5C5B5A5A595857565556555453525251504F4F4E
4D4C4C4B49494847474645454443434242413F3F3E3F3D3E3C3D3C3C3B3B39393838383838373737
36363635353534343434343333333333
>
<
686766666564636262616061605F5E5D5C5B5A5A595A5957565554555452525051504F4E4F4E4C4B
4C4B49494846474644454442434240413F3F3E3E3D3C3C3B3C3A3B393A3838383838373737363634
35353334343433333333333232323232
>
<
100F0E0D0C0B0B0A0909080707060605050504040303030202020202020201010101010101010101
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
>
<
808182838485868788898A8B8C8D8D8E8F90919293949595969798999A9A9B9C9D9E9E9FA0A1A1A2
A3A4A4A5A6A6A7A8A8A9AAAAABACACADADAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B7B8B8B8
B9B9B9BABABABBBBBBBBBBBCBCBCBCBC
>
<
82838485868788898A8B8C8D8E8F8F90919293949596979798999A9B9C9C9D9E9FA0A0A1A2A3A3A4
A5A6A6A7A8A8A9AAAAABACACADAEAEAFAFB0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9B9BABABA
BBBBBBBCBCBCBDBDBDBDBDBEBEBEBEBE
>
<
85868788898A8B8C8D8E8F8F90919293949596979898999A9B9C9D9D9E9FA0A1A1A2A3A4A4A5A6A7
A7A8A9A9AAABABACADADAEAFAFB0B1B1B2B2B3B3B4B5B5B6B6B7B7B8B8B9B9B9BABABBBBBBBCBCBD
BDBDBEBEBEBEBFBFBFBFBFC0C0C0C0C0
>
4 %_Br
[
0.7 0 50 100 %_BS
%_0.7 0 50 100 Bs
0.95 0 71 42.6396 %_BS
%_0.95 0 71 42.6396 Bs
0.7 0 30.9278 9.13706 %_BS
%_0.7 0 30.9278 9.13706 Bs
0.4 0 35.2941 0 %_BS
%_0.4 0 35.2941 0 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
4 Bn
%AI5_BeginGradient: (Kruhov\775 p\770echod 1)
(Kruhov\775 p\770echod 1) 1 2 Bd
[
<
00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F20212223
24252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F51
52535455555658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B
7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F9090919293949495969697989899
9A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABAAAAAB
ABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2
>
<
00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C
1D1D1E1F202122222324262728292A2B2C2D2E2F2F30313233343536373838393A3B3C3D3E3F4041
434445464748494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F6061626364646566676869
6A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A
8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3
A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC
>
<
00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C
1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142
434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566
676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F808181828383
8485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A
9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B
0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B
3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587
898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9
D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1
B0AFAEADADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A
898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766656463
6261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C
3B3A393837363534333231302F2E2D2C2B2A29282726252423
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A89
8887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261
605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39
3837363534333231302F2E2D2C2B2A29282726252423222120
>
4 %_Br
[
1 0 50 0 %_BS
%_1 0 50 0 Bs
0 0 50 100 %_BS
%_0 0 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Kruhov\775 p\770echod 2)
(Kruhov\775 p\770echod 2) 1 6 Bd
[
<
0B0B0B0B0B0A0A0A0A0A0A0A0A0A090909090909090A0A0A09090909090909090909090808080808
08080809090908080808080808080808080807070707070808080808080808070707070707070707
07070707070606070707070707070707070808080808080707070707070707070808080808080808
08080808080808070707070808080808080808080808080808080808080808080808
>
<
FBFAFAF9F8F8F7F6F6F5F4F4F3F2F1F1F1F0EFEEEDECEBEAE9E9E8E8E7E6E6E5E4E3E3E2E1E0DFDE
DEDDDCDBDADAD9D8D7D7D6D5D4D4D3D2D1D1D0CFCECECDCCCCCAC9C9C8C7C7C6C5C5C4C3C3C2C2C0
BFBFBEBEBDBBBBBABAB9B9B8B8B6B6B5B5B4B4B2B2B1B1B0B0AEAEAEADADABABAAAAAAA9A9A9A7A7
A7A6A6A6A4A4A4A3A3A3A3A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9E9E9E9E9E9E9E9E
>
1
<
01010101010101010101010101010101010101010000000000010101010101010101010101010101
01010101010101010101010101010101010100000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000
>
<
E4E4E4E4E4E5E5E5E5E5E5E5E5E5E6E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E7E7E8E8E8E8E8
E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEB
EBEBEBEBEBECECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDED
EDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
>
<
232425262728292A2B2C2D2E2F30313232333435363738393A3B3C3C3D3E3F404142424344454647
4748494A4B4B4C4D4E4E4F50515152535454555657575859595A5B5B5C5D5D5E5F5F606161626263
64646565666767686869696A6A6B6B6C6C6D6D6E6E6F6F7070717171727273737474747575757676
76777777787878797979797A7A7A7A7B7B7B7B7B7C7C7C7C7C7C7D7D7D7D7D7D7D7D
>
<
22222222222222222121212121212121212121212121212120202020202020202020202020202020
20201F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E
1E1E1E1E1E1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1C1C
1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C
>
4 %_Br
<
08080807070707070606070707060606060605050505050605050505050505050505050405050505
04040404040504040404050505040405050505040404040404040404040404040405050404040404
04
>
<
9E9D9B9A999796949392908F8D8C8A89878684838180807E7D7B7A78777674737170706F6D6C6A69
6868666564626161605E5D5C5C5B59585656555454535150504F4E4E4C4B4B494947474646454544
44
>
1
0
<
EEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F2F2F3F3F3F3F3F4F4F4F4F4F4F5F5F5F5F5
F6F6F6F6F6F6F7F7F7F7F7F7F7F8F8F8F8F8F8F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFB
FB
>
<
7D7E7F808182838485868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2
A3A3A4A5A6A7A8A8A9AAABACACADAEAFB0B0B1B2B2B3B4B5B5B6B7B7B8B9B9BABABBBBBCBCBDBDBE
BE
>
<
1C1C1B1B1B1B1A1A1A1A191919181818181717171716161616151515151414141413131313121212
121111111110101010100F0F0F0F0E0E0E0E0E0D0D0D0D0D0C0C0C0C0C0C0B0B0B0B0B0B0A0A0A0A
0A
>
4 %_Br
<
0405060708090A0C0D0E0F11121314151718191B1C1D1E1F202123242627282A2B2C2D2E2F313233
3334363738393B3C3D3E3F40424344454647494A4B4C4D4E4E4F5051525354555758595A5C5D5D5E
5F606162636465676868696A6B6C6D6E6F7070717273747576777778797A7B7C7C7D7E7F80808182
84858586868687
>
<
44434342424140403F3F3E3E3F3F3E3E3D3D3D3C3C3B3B3A3A393838383737363635353435353434
343332323131302F2F2E2E2E2D2D2C2B2B2A2A292A2A292929282827272626252424232322222221
2120201F1F201F1F1E1E1D1D1C1C1B1B1A1A1A191818171716161615151414151515141413131312
12111111101010
>
1
0
<
FBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4
D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBDBCBBBAB9B8B7B6B5B4B3B2B1B0B0AF
AEADACABAAA9A8A7A6A6A5A4A3A2A1A09F9E9E9D9C9B9A9998979796959493929291908F8E8E8D8C
8B8A8A89888887
>
<
BEBEBEBEBEBEBEBEBEBEBEBEBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBCBCBCBC
BCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
BBBBBBBBBBBABABABABABABABABABABABABABABABABABABABABABABABABABAB9B9B9B9B9B9B9B9B9
B9B9B9B9B9B9B9
>
<
0A0A0A0A0A0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0F0F
0F0F0F0F0F0F0F101010101010101011111111111111111112121212121212121213131313131313
13131414141414141414141515151515151515151516161616161616161617171717171717171717
17181818181818
>
4 %_Br
<
8787878888888989898A8A8B8B8B8C8C8D8D8D8E8E8F909090919192929393949495959696979798
9899999B9B9C9C9C9C9D9D9E9F9FA0A0A1A1A1A1A2A3A3A4A4A5A6A6A7A7A7A8A9A9A9AAAAAAABAB
ACACACADACADAEAEAEAEAFB0B0B0B1B1B1B2B2B3B3B3B4B4B4B5B5B5B6B6B6B7B7B7B7B8B8B8B8B9
B9BABABABABBBBBBBCBCBCBDBDBDBDBEBDBEBFBEBFBFBFBFBFC0C0C0C1C1C1C1C1C2C2C2C2C2C2C2
C2C3C3C3C3C3C3C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C5C5C5C5C5C5C5C6C6C6C5C5C5C5C5C5C5C5
C5C5C5C6C6C5C5C5C5C5C5C5C4C4
>
<
1010100F0F0F0F0F0F101010101010100F0F0F0F0F0E1010100F0F0F0F0E0E0E0E10100F0F0F0F0E
0E0E0E0F0F0F0F0E0E0E0E0E0D0F0F0F0E0F0E0E0E0D0F0F0F0E0E0E0E0E0D0F0F0E0E0E0E0E0D0D
0F0F0E0E0E0E0E0E0D0F0F0F0F0E0E0E0E101010100F0F0F0F111111111111101112121212121212
12131313131313121214141414141414141616161616161616181818181818181A1A1A1A1A1A1A1A
1C1C1C1C1C1C1D1F1F1F1F1F1F20212121222222222224242424242525272727272728282A2A2A2A
2B2B2B2D2D2D2D2D2E2E30303030
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFCFCFBF9F7
F6F6F4F2F0EFEFEDEBE9E7E5E5E4E2E0DFDEDEDDDBDAD8D6D7D4D3D2D1CFCECECCCAC9C7C6C4C3C3
C2C0BFBDBBBAB8B9B7B5B4B2B1AFADACAAAAA8A7A5A3A2A09F9D9B999797969492908E8C8A898785
838280807E7D7B78767472716F6D6B6967656462605F5C5B5B59575654514F4E4C4A48464442403E
3C3B39363432302F2D2B28262523
>
0
<
8787878686868585858484838383828281818180807F7F7E7E7D7D7C7C7B7B7A7A79797878777776
7675757474737372727171706F6F6E6E6D6D6C6C6B6A6A6969686767666665656463636262616060
5F5F5E5D5D5C5B5B5A5A5958585756565555545353525151504F4F4E4D4D4C4B4B4A4A4948484746
4645444443424241403F3F3E3D3D3C3B3B3A3939383737363535343332323130302F2E2D2D2C2B2B
2A29292827262625242423222121201F1E1E1D1C1C1B1A19191817161615141313121111100F0E0E
0D0C0B0B0A090808070605050403
>
<
B9B9B9B9B9B9B9B9B9B8B8B8B8B8B8B8B8B8B8B8B8B8B7B7B7B7B7B7B7B7B7B7B7B6B6B6B6B6B6B6
B6B6B6B5B5B5B5B5B5B5B5B5B5B4B4B4B4B4B4B4B4B4B3B3B3B3B3B3B3B3B3B2B2B2B2B2B2B2B2B2
B1B1B1B1B1B1B1B1B1B0B0B0B0B0B0B0B0AFAFAFAFAFAFAFAFAEAEAEAEAEAEAEAEADADADADADADAD
ADACACACACACACACACABABABABABABABABAAAAAAAAAAAAAAAAA9A9A9A9A9A9A9A8A8A8A8A8A8A8A8
A7A7A7A7A7A7A7A6A6A6A6A6A6A6A5A5A5A5A5A5A5A5A4A4A4A4A4A4A4A3A3A3A3A3A3A3A2A2A2A2
A2A2A2A1A1A1A1A1A1A1A0A0A0A0
>
<
18181919191A1A1B1B1C1C1D1D1E1E1F1F202021222223232425252627272829292A2A2B2C2C2D2E
2F2F30313132333334353636373839393A3B3B3C3D3E3E3F404142424344454546474849494A4B4C
4D4D4E4F5051515253545556565758595A5B5B5C5D5E5F6060616263646566666768696A6B6C6D6D
6E6F70717273747475767778797A7B7C7D7D7E7F80818283848586878888898A8B8C8D8E8F909192
93949595969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8
B9BABBBCBDBEBFC0C1C2C3C4C5C6
>
4 %_Br
<
C4C5C5C5C6C6C7C7C8C9C9CACACACBCCCCCDCDCECECFCFD0D0D0D0D1D1D2D2D3D3D4D4D4D5D6D6D7
D7D7D8D8D9DADADBDBDCDCDCDCDDDDDDDEDEDEDFDFDFE0E0E0E1E1E1E2E2E2E2E2E2E3E3E3E3E3E3
E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E3E4E3E3E3E2
>
<
303234343638393B3D3E404242434547484A4C4E505153555758585A5C5E60626466686A6B6D6F71
737577797A7C7E8082848486888A8C8E90929495979A9C9EA0A2A4A6A8AAACAEB1B3B5B6B8BABCBE
C0C2C4C6C7C9CBCDCFD0D2D4D5D7D8DADCDEDFE1E3
>
<
23212222232122212120211F21202120201F201E1F201E1F1E1E1E1F1E1E1D1D1C1C1B1C1C1B1B1A
1B191A18191718191718181917181617161617161615151415131414131412131212111213111211
121111101112111210111011101112111211111011
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000010101010101010101010101010101010101010101010101010201
020101010101010201020202020202020202020202
>
<
0304040505060607080809090A0B0B0C0D0D0E0E0F101011121213141415151617171819191A1B1B
1C1D1D1E1F1F2020212222232424252626272828292A2A2B2C2C2D2E2E2F30303132323334343536
36373838393A3B3B3C3D3D3E3F3F40414142434344
>
<
A09F9E9E9D9C9B9A99989796969594939291908F8E8D8C8B8A89898887868584838281807F7E7D7C
7B7A79787776757473727271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A5958575655
54535251504F4E4D4C4B4A49484746454443424140
>
<
C6C6C5C5C4C4C3C3C2C2C1C1C0C0BFBFBEBEBDBDBCBBBBBABAB9B9B8B8B7B7B6B6B5B5B4B3B3B2B2
B1B1B0B0AFAFAEADADACACABABAAAAA9A9A8A7A7A6A6A5A5A4A4A3A2A2A1A1A0A09F9F9E9D9D9C9C
9B9B9A9A9998989797969695959493939292919190
>
4 %_Br
[
0.043137 0.984314 1 0.003922 0.894118 0.137255 0.133333 2 33.3333 0 %_BS
%_0.043137 0.984314 1 0.003922 0.894118 0.137255 0.133333 2 33.3333 0 Bs
0.031373 0.619608 1 0 0.933333 0.490196 0.109804 2 42.6471 20.0599 %_BS
%_0.031373 0.619608 1 0 0.933333 0.490196 0.109804 2 42.6471 20.0599 Bs
0.015686 0.266667 1 0 0.984314 0.745098 0.039216 2 47.0588 40.4192 %_BS
%_0.015686 0.266667 1 0 0.984314 0.745098 0.039216 2 47.0588 40.4192 Bs
0.529412 0.062745 1 0 0.529412 0.72549 0.094118 2 56.7164 58.982 %_BS
%_0.529412 0.062745 1 0 0.529412 0.72549 0.094118 2 56.7164 58.982 Bs
0.768627 0.188235 0.137255 0 0.011765 0.627451 0.776471 2 51.5625 80.8383 %_BS
%_0.768627 0.188235 0.137255 0 0.011765 0.627451 0.776471 2 51.5625 80.8383 Bs
0.886274 0.890196 0.066667 0.007843 0.266667 0.25098 0.564706 2 50 100 %_BS
%_0.886274 0.890196 0.066667 0.007843 0.266667 0.25098 0.564706 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Line\741rn\755 p\770echod 1)
(Line\741rn\755 p\770echod 1) 0 2 Bd
[
<
00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F20212223
24252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F51
52535455555658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B
7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F9090919293949495969697989899
9A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABAAAAAB
ABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2
>
<
00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C
1D1D1E1F202122222324262728292A2B2C2D2E2F2F30313233343536373838393A3B3C3D3E3F4041
434445464748494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F6061626364646566676869
6A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A
8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3
A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC
>
<
00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C
1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142
434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566
676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F808181828383
8485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A
9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B
0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B
3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587
898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9
D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1
B0AFAEADADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A
898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766656463
6261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C
3B3A393837363534333231302F2E2D2C2B2A29282726252423
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A89
8887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261
605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39
3837363534333231302F2E2D2C2B2A29282726252423222120
>
4 %_Br
[
0 0 50 100 %_BS
%_0 0 50 100 Bs
1 0 50 0 %_BS
%_1 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Line\741rn\755 p\770echod 2)
(Line\741rn\755 p\770echod 2) 0 6 Bd
[
<
C4C5C5C5C6C6C7C7C8C9C9CACACACBCCCCCDCDCECECFCFD0D0D0D0D1D1D2D2D3D3D4D4D4D5D6D6D7
D7D7D8D8D9DADADBDBDCDCDCDCDDDDDDDEDEDEDFDFDFE0E0E0E1E1E1E2E2E2E2E2E2E3E3E3E3E3E3
E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E3E4E3E3E3E2
>
<
303234343638393B3D3E404242434547484A4C4E505153555758585A5C5E60626466686A6B6D6F71
737577797A7C7E8082848486888A8C8E90929495979A9C9EA0A2A4A6A8AAACAEB1B3B5B6B8BABCBE
C0C2C4C6C7C9CBCDCFD0D2D4D5D7D8DADCDEDFE1E3
>
<
23212222232122212120211F21202120201F201E1F201E1F1E1E1E1F1E1E1D1D1C1C1B1C1C1B1B1A
1B191A18191718191718181917181617161617161615151415131414131412131212111213111211
121111101112111210111011101112111211111011
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000010101010101010101010101010101010101010101010101010201
020101010101010201020202020202020202020202
>
<
0304040505060607080809090A0B0B0C0D0D0E0E0F101011121213141415151617171819191A1B1B
1C1D1D1E1F1F2020212222232424252626272828292A2A2B2C2C2D2E2E2F30303132323334343536
36373838393A3B3B3C3D3D3E3F3F40414142434344
>
<
A09F9E9E9D9C9B9A99989796969594939291908F8E8D8C8B8A89898887868584838281807F7E7D7C
7B7A79787776757473727271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A5958575655
54535251504F4E4D4C4B4A49484746454443424140
>
<
C6C6C5C5C4C4C3C3C2C2C1C1C0C0BFBFBEBEBDBDBCBBBBBABAB9B9B8B8B7B7B6B6B5B5B4B3B3B2B2
B1B1B0B0AFAFAEADADACACABABAAAAA9A9A8A7A7A6A6A5A5A4A4A3A2A2A1A1A0A09F9F9E9D9D9C9C
9B9B9A9A9998989797969695959493939292919190
>
4 %_Br
<
8787878888888989898A8A8B8B8B8C8C8D8D8D8E8E8F909090919192929393949495959696979798
9899999B9B9C9C9C9C9D9D9E9F9FA0A0A1A1A1A1A2A3A3A4A4A5A6A6A7A7A7A8A9A9A9AAAAAAABAB
ACACACADACADAEAEAEAEAFB0B0B0B1B1B1B2B2B3B3B3B4B4B4B5B5B5B6B6B6B7B7B7B7B8B8B8B8B9
B9BABABABABBBBBBBCBCBCBDBDBDBDBEBDBEBFBEBFBFBFBFBFC0C0C0C1C1C1C1C1C2C2C2C2C2C2C2
C2C3C3C3C3C3C3C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C5C5C5C5C5C5C5C6C6C6C5C5C5C5C5C5C5C5
C5C5C5C6C6C5C5C5C5C5C5C5C4C4
>
<
1010100F0F0F0F0F0F101010101010100F0F0F0F0F0E1010100F0F0F0F0E0E0E0E10100F0F0F0F0E
0E0E0E0F0F0F0F0E0E0E0E0E0D0F0F0F0E0F0E0E0E0D0F0F0F0E0E0E0E0E0D0F0F0E0E0E0E0E0D0D
0F0F0E0E0E0E0E0E0D0F0F0F0F0E0E0E0E101010100F0F0F0F111111111111101112121212121212
12131313131313121214141414141414141616161616161616181818181818181A1A1A1A1A1A1A1A
1C1C1C1C1C1C1D1F1F1F1F1F1F20212121222222222224242424242525272727272728282A2A2A2A
2B2B2B2D2D2D2D2D2E2E30303030
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFCFCFBF9F7
F6F6F4F2F0EFEFEDEBE9E7E5E5E4E2E0DFDEDEDDDBDAD8D6D7D4D3D2D1CFCECECCCAC9C7C6C4C3C3
C2C0BFBDBBBAB8B9B7B5B4B2B1AFADACAAAAA8A7A5A3A2A09F9D9B999797969492908E8C8A898785
838280807E7D7B78767472716F6D6B6967656462605F5C5B5B59575654514F4E4C4A48464442403E
3C3B39363432302F2D2B28262523
>
0
<
8787878686868585858484838383828281818180807F7F7E7E7D7D7C7C7B7B7A7A79797878777776
7675757474737372727171706F6F6E6E6D6D6C6C6B6A6A6969686767666665656463636262616060
5F5F5E5D5D5C5B5B5A5A5958585756565555545353525151504F4F4E4D4D4C4B4B4A4A4948484746
4645444443424241403F3F3E3D3D3C3B3B3A3939383737363535343332323130302F2E2D2D2C2B2B
2A29292827262625242423222121201F1E1E1D1C1C1B1A19191817161615141313121111100F0E0E
0D0C0B0B0A090808070605050403
>
<
B9B9B9B9B9B9B9B9B9B8B8B8B8B8B8B8B8B8B8B8B8B8B7B7B7B7B7B7B7B7B7B7B7B6B6B6B6B6B6B6
B6B6B6B5B5B5B5B5B5B5B5B5B5B4B4B4B4B4B4B4B4B4B3B3B3B3B3B3B3B3B3B2B2B2B2B2B2B2B2B2
B1B1B1B1B1B1B1B1B1B0B0B0B0B0B0B0B0AFAFAFAFAFAFAFAFAEAEAEAEAEAEAEAEADADADADADADAD
ADACACACACACACACACABABABABABABABABAAAAAAAAAAAAAAAAA9A9A9A9A9A9A9A8A8A8A8A8A8A8A8
A7A7A7A7A7A7A7A6A6A6A6A6A6A6A5A5A5A5A5A5A5A5A4A4A4A4A4A4A4A3A3A3A3A3A3A3A2A2A2A2
A2A2A2A1A1A1A1A1A1A1A0A0A0A0
>
<
18181919191A1A1B1B1C1C1D1D1E1E1F1F202021222223232425252627272829292A2A2B2C2C2D2E
2F2F30313132333334353636373839393A3B3B3C3D3E3E3F404142424344454546474849494A4B4C
4D4D4E4F5051515253545556565758595A5B5B5C5D5E5F6060616263646566666768696A6B6C6D6D
6E6F70717273747475767778797A7B7C7D7D7E7F80818283848586878888898A8B8C8D8E8F909192
93949595969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8
B9BABBBCBDBEBFC0C1C2C3C4C5C6
>
4 %_Br
<
0405060708090A0C0D0E0F11121314151718191B1C1D1E1F202123242627282A2B2C2D2E2F313233
3334363738393B3C3D3E3F40424344454647494A4B4C4D4E4E4F5051525354555758595A5C5D5D5E
5F606162636465676868696A6B6C6D6E6F7070717273747576777778797A7B7C7C7D7E7F80808182
84858586868687
>
<
44434342424140403F3F3E3E3F3F3E3E3D3D3D3C3C3B3B3A3A393838383737363635353435353434
343332323131302F2F2E2E2E2D2D2C2B2B2A2A292A2A292929282827272626252424232322222221
2120201F1F201F1F1E1E1D1D1C1C1B1B1A1A1A191818171716161615151414151515141413131312
12111111101010
>
1
0
<
FBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4
D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBDBCBBBAB9B8B7B6B5B4B3B2B1B0B0AF
AEADACABAAA9A8A7A6A6A5A4A3A2A1A09F9E9E9D9C9B9A9998979796959493929291908F8E8E8D8C
8B8A8A89888887
>
<
BEBEBEBEBEBEBEBEBEBEBEBEBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBCBCBCBC
BCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
BBBBBBBBBBBABABABABABABABABABABABABABABABABABABABABABABABABABAB9B9B9B9B9B9B9B9B9
B9B9B9B9B9B9B9
>
<
0A0A0A0A0A0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0F0F
0F0F0F0F0F0F0F101010101010101011111111111111111112121212121212121213131313131313
13131414141414141414141515151515151515151516161616161616161617171717171717171717
17181818181818
>
4 %_Br
<
08080807070707070606070707060606060605050505050605050505050505050505050405050505
04040404040504040404050505040405050505040404040404040404040404040405050404040404
04
>
<
9E9D9B9A999796949392908F8D8C8A89878684838180807E7D7B7A78777674737170706F6D6C6A69
6868666564626161605E5D5C5C5B59585656555454535150504F4E4E4C4B4B494947474646454544
44
>
1
0
<
EEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F2F2F3F3F3F3F3F4F4F4F4F4F4F5F5F5F5F5
F6F6F6F6F6F6F7F7F7F7F7F7F7F8F8F8F8F8F8F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFB
FB
>
<
7D7E7F808182838485868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2
A3A3A4A5A6A7A8A8A9AAABACACADAEAFB0B0B1B2B2B3B4B5B5B6B7B7B8B9B9BABABBBBBCBCBDBDBE
BE
>
<
1C1C1B1B1B1B1A1A1A1A191919181818181717171716161616151515151414141413131313121212
121111111110101010100F0F0F0F0E0E0E0E0E0D0D0D0D0D0C0C0C0C0C0C0B0B0B0B0B0B0A0A0A0A
0A
>
4 %_Br
<
0B0B0B0B0B0A0A0A0A0A0A0A0A0A090909090909090A0A0A09090909090909090909090808080808
08080809090908080808080808080808080807070707070808080808080808070707070707070707
07070707070606070707070707070707070808080808080707070707070707070808080808080808
08080808080808070707070808080808080808080808080808080808080808080808
>
<
FBFAFAF9F8F8F7F6F6F5F4F4F3F2F1F1F1F0EFEEEDECEBEAE9E9E8E8E7E6E6E5E4E3E3E2E1E0DFDE
DEDDDCDBDADAD9D8D7D7D6D5D4D4D3D2D1D1D0CFCECECDCCCCCAC9C9C8C7C7C6C5C5C4C3C3C2C2C0
BFBFBEBEBDBBBBBABAB9B9B8B8B6B6B5B5B4B4B2B2B1B1B0B0AEAEAEADADABABAAAAAAA9A9A9A7A7
A7A6A6A6A4A4A4A3A3A3A3A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9E9E9E9E9E9E9E9E
>
1
<
01010101010101010101010101010101010101010000000000010101010101010101010101010101
01010101010101010101010101010101010100000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000
>
<
E4E4E4E4E4E5E5E5E5E5E5E5E5E5E6E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E7E7E8E8E8E8E8
E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEB
EBEBEBEBEBECECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDED
EDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
>
<
232425262728292A2B2C2D2E2F30313232333435363738393A3B3C3C3D3E3F404142424344454647
4748494A4B4B4C4D4E4E4F50515152535454555657575859595A5B5B5C5D5D5E5F5F606161626263
64646565666767686869696A6A6B6B6C6C6D6D6E6E6F6F7070717171727273737474747575757676
76777777787878797979797A7A7A7A7B7B7B7B7B7C7C7C7C7C7C7D7D7D7D7D7D7D7D
>
<
22222222222222222121212121212121212121212121212120202020202020202020202020202020
20201F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E
1E1E1E1E1E1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1C1C
1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C
>
4 %_Br
[
0.886274 0.890196 0.066667 0.007843 0.266667 0.25098 0.564706 2 50 100 %_BS
%_0.886274 0.890196 0.066667 0.007843 0.266667 0.25098 0.564706 2 50 100 Bs
0.768627 0.188235 0.137255 0 0.011765 0.627451 0.776471 2 51.5625 80.8383 %_BS
%_0.768627 0.188235 0.137255 0 0.011765 0.627451 0.776471 2 51.5625 80.8383 Bs
0.529412 0.062745 1 0 0.529412 0.72549 0.094118 2 56.7164 58.982 %_BS
%_0.529412 0.062745 1 0 0.529412 0.72549 0.094118 2 56.7164 58.982 Bs
0.015686 0.266667 1 0 0.984314 0.745098 0.039216 2 47.0588 40.4192 %_BS
%_0.015686 0.266667 1 0 0.984314 0.745098 0.039216 2 47.0588 40.4192 Bs
0.031373 0.619608 1 0 0.933333 0.490196 0.109804 2 42.6471 20.0599 %_BS
%_0.031373 0.619608 1 0 0.933333 0.490196 0.109804 2 42.6471 20.0599 Bs
0.043137 0.984314 1 0.003922 0.894118 0.137255 0.133333 2 33.3333 0 %_BS
%_0.043137 0.984314 1 0.003922 0.894118 0.137255 0.133333 2 33.3333 0 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Vzorek posunut\775ch \750tverc\771)
(Vzorek posunut\775ch \750tverc\771) 0 0 55.0781 55.0801 [
%AI3_Tile
(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 55.0801 L
55.0781 55.0801 L
55.0781 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.054902 0.015686 0.729412 0 0.968627 0.921569 0.403922 Xa
 0.054902 0.015686 0.729412 0 0.968627 0.921569 0.403922 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
26.1436 52.3262 m
26.1436 29.4307 L
3.03125 29.4307 L
3.03125 52.3262 L
26.1436 52.3262 L
f
25.0264 50.123 m
5.89063 50.123 L
5.89063 32.4961 L
25.0264 32.4961 L
25.0264 50.123 L
f
*U
*u
5.89063 50.123 m
25.0264 50.123 L
25.0264 32.4961 L
5.89063 32.4961 L
5.89063 50.123 L
n
10.0313 34.2578 m
24.1338 34.2578 L
24.1338 48.3613 L
10.0313 48.3613 L
10.0313 34.2578 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.019608 0.501961 0.980392 0 0.94902 0.572549 0.137255 Xa
 0.019608 0.501961 0.980392 0 0.94902 0.572549 0.137255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
22.4082 48.793 m
8.30566 48.793 L
8.30566 34.6895 L
22.4082 34.6895 L
22.4082 48.793 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.043137 0.972549 0.964706 0.003922 0.894118 0.156863 0.156863 Xa
 0.043137 0.972549 0.964706 0.003922 0.894118 0.156863 0.156863 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
52.6943 24.7852 m
52.6943 1.67578 L
28.9355 1.67578 L
28.9355 24.7852 L
52.6943 24.7852 L
f
47.6777 22.582 m
30.0527 22.582 L
30.0527 4.95703 L
47.6777 4.95703 L
47.6777 22.582 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
30.0527 22.582 m
50.6982 22.582 L
50.6982 4.95703 L
30.0527 4.95703 L
30.0527 22.582 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.498039 0.047059 0.968627 0 0.560784 0.745098 0.262745 Xa
 0.498039 0.047059 0.968627 0 0.560784 0.745098 0.262745 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
47.4199 21.252 m
32.2393 21.252 L
32.2393 6.50293 L
47.4199 6.50293 L
47.4199 21.252 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.694118 0.152941 0.019608 0 0.192157 0.666667 0.866667 Xa
 0.694118 0.152941 0.019608 0 0.192157 0.666667 0.866667 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
27.5391 27.5391 m
27.5391 0 L
0 0 L
0 27.5391 L
27.5391 27.5391 L
f
25.4316 26.1445 m
2.75293 26.1445 L
2.75293 2.16992 L
25.4316 2.16992 L
25.4316 26.1445 L
f
*U
*u
4.95605 7.40039 m
22.582 7.40039 L
22.582 25.0273 L
4.95605 25.0273 L
4.95605 7.40039 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.192157 0.023529 0.968627 0 0.843137 0.854902 0.180392 Xa
 0.192157 0.023529 0.968627 0 0.843137 0.854902 0.180392 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
22.582 5.67383 m
4.95605 5.67383 L
4.95605 25.0273 L
22.582 25.0273 L
22.582 5.67383 L
f
20.3887 21.3281 m
7.58105 21.3281 L
7.58105 10.0313 L
20.3887 10.0313 L
20.3887 21.3281 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.513725 0.968627 0.090196 0.007843 0.560784 0.180392 0.52549 Xa
 0.513725 0.968627 0.090196 0.007843 0.560784 0.180392 0.52549 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
6.93555 8.73633 m
21.0371 8.73633 L
21.0371 22.8379 L
6.93555 22.8379 L
6.93555 8.73633 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.611765 0.035294 0.015686 0 0.278431 0.752941 0.921569 Xa
 0.611765 0.035294 0.015686 0 0.278431 0.752941 0.921569 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
55.0781 55.0801 m
55.0781 27.5391 L
27.5391 27.5391 L
27.5391 55.0801 L
55.0781 55.0801 L
f
52.3252 50.9688 m
30.292 50.9688 L
30.292 28.9355 L
52.3252 28.9355 L
52.3252 50.9688 L
f
*U
*u
30.292 50.9688 m
52.3252 50.9688 L
52.3252 28.9355 L
30.292 28.9355 L
30.292 50.9688 L
n
32.4951 30.0527 m
50.1221 30.0527 L
50.1221 47.6777 L
32.4951 47.6777 L
32.4951 30.0527 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.054902 0.015686 0.729412 0 0.968627 0.921569 0.403922 Xa
 0.054902 0.015686 0.729412 0 0.968627 0.921569 0.403922 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
50.1221 30.0527 m
32.4951 30.0527 L
32.4951 48.9727 L
50.1221 48.9727 L
50.1221 30.0527 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.035294 0.886274 0.078431 0 0.901961 0.254902 0.552941 Xa
 0.035294 0.886274 0.078431 0 0.901961 0.254902 0.552941 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.9063 33.749 m
49.0078 33.749 L
49.0078 47.8506 L
34.9063 47.8506 L
34.9063 33.749 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed Brush Pat)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-7890.8833 8490.9551 m
-7799.0479 8490.9551 L
-7799.0479 8486.6758 L
-7890.8833 8486.6758 L
-7890.8833 8490.9551 L
n
0 O
0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
-7890.6631 8488.2754 m
-7891 8488.3418 -7890.4814 8488.5313 -7890.8833 8488.3887 C
-7890.8379 8488.2705 -7890.7725 8488.1816 -7890.6631 8488.2754 C
f
-7800.1675 8488.4414 m
-7801.2529 8489.2041 -7802.6816 8488.4336 -7803.8701 8488.9199 C
-7804.0098 8488.9521 -7803.8354 8488.502 -7804.1484 8488.6025 C
-7805.3008 8489.1953 -7807.1162 8488.8418 -7808.5195 8488.3848 C
-7808.4346 8488.2666 L
-7808.7021 8488.1816 -7809.0283 8488.5723 -7809.3115 8488.5176 C
-7809.3135 8488.4395 -7809.2207 8488.4063 -7809.2861 8488.2979 C
-7809.3574 8488.5352 -7809.7979 8488.4082 -7809.9189 8488.584 C
-7810.0303 8488.4922 -7810.0195 8488.3047 -7810.1641 8488.2002 C
-7810.3262 8488.4697 L
-7810.7769 8489.1094 -7811.4209 8488.4258 -7812.0361 8488.7559 C
-7812.0063 8488.6934 -7811.9453 8488.6445 -7811.9941 8488.584 C
-7812.9814 8488.9727 -7814.2168 8488.8994 -7815.3208 8489.043 C
-7815.2769 8488.9482 -7815.2363 8488.7754 -7815.3008 8488.668 C
-7815.3555 8488.9512 -7815.6963 8489.0225 -7815.9922 8489.0781 C
-7816.1255 8488.7871 -7816.4995 8489.3438 -7816.8467 8489.1826 C
-7816.8169 8489.1191 L
-7817.0732 8489.4238 -7817.1973 8488.9434 -7817.4053 8489.3086 C
-7817.5684 8489.0801 L
-7817.6807 8489.4902 -7817.9395 8488.8672 -7818.1514 8489.0762 C
-7818.1445 8489.1602 L
-7818.3442 8489.2598 -7818.4482 8489.0537 -7818.6338 8489.123 C
-7818.6514 8489.0762 L
-7819.0854 8489.1826 -7819.3379 8488.9551 -7819.3271 8489.2754 C
-7819.4795 8489.0186 -7818.9063 8489.1582 -7819.1455 8488.7842 C
-7820.5732 8489.1152 -7822.0459 8489.0498 -7823.4834 8489.0566 C
-7823.6465 8488.9277 -7823.7505 8488.8887 -7823.7871 8488.7666 C
-7823.9307 8488.832 -7824.3281 8488.8262 -7824.4585 8488.9902 C
-7824.4102 8488.9834 -7824.5513 8488.8262 -7824.6274 8488.8105 C
-7824.8887 8488.6895 -7824.9131 8489.1621 -7825.2002 8489.0186 C
-7825.0859 8488.9336 -7825.0469 8488.8301 -7825.0854 8488.7109 C
-7825.3301 8488.9609 -7825.6577 8488.9209 -7825.9473 8489.002 C
-7825.9023 8488.9482 -7825.8325 8488.916 -7825.8433 8488.8154 C
-7826.1602 8489.0986 -7826.4209 8488.7559 -7826.6982 8488.9346 C
-7826.5947 8488.75 L
-7827.0415 8488.5254 -7826.7266 8489.1367 -7827.1128 8489.0039 C
-7827.02 8488.9453 -7827.0527 8488.873 -7827.0361 8488.7979 C
-7827.3965 8489.1338 -7827.9795 8489.0225 -7828.3389 8489.1367 C
-7828.3174 8489.1113 -7828.3232 8489.0605 Y
-7828.7148 8489.1025 -7829.1245 8488.998 -7829.5552 8489.1445 C
-7829.7119 8489.0625 -7829.5039 8488.6934 -7829.9185 8488.7617 C
-7829.9033 8489.1328 -7830.6221 8488.9141 -7830.3779 8489.334 C
-7830.7319 8489.2734 -7831.2925 8489.1338 -7831.5283 8489.2598 C
-7831.3691 8489.1191 -7831.7007 8488.8066 -7831.4063 8488.7754 C
-7831.6289 8488.5498 L
-7831.5957 8488.3984 -7831.3999 8488.6016 -7831.4707 8488.4102 C
-7831.6182 8488.4258 -7832.0479 8488.5723 -7832.1797 8488.5117 C
-7832.4531 8488.7393 -7832.7041 8489.1641 -7833.1465 8489.2109 C
-7832.9385 8489.0664 -7833.2646 8488.8018 -7833.1235 8488.7383 C
-7833.7407 8489.4482 L
-7833.8877 8489.4658 -7833.7725 8489.1563 -7833.9854 8489.2529 C
-7833.9746 8489.3506 -7834.0674 8489.4121 -7834.1318 8489.4922 C
-7834.1875 8489.4482 -7834.7441 8489.584 -7834.8081 8489.2178 C
-7834.8735 8489.0762 -7834.5684 8489.1426 -7834.7314 8489.0117 C
-7835.0029 8489.0146 -7835.0151 8489.1406 -7835.2871 8489.1465 C
-7835.2925 8489.0977 L
-7835.4717 8489.043 -7835.8213 8489.2529 -7835.6265 8489.4551 C
-7835.5015 8489.4658 -7835.6738 8489.2354 -7835.4888 8489.3418 C
-7835.6152 8489.5537 -7835.9312 8489.6133 -7836.2031 8489.6162 C
-7836.1104 8489.5586 -7836.1216 8489.4609 -7836.0845 8489.3574 C
-7836.4497 8489.6445 -7836.8369 8489.7354 -7837.2451 8489.8555 C
-7837.2515 8490.0293 -7837.0928 8489.5391 -7837.0327 8489.6309 C
-7837.5557 8489.3896 -7838.1128 8489.9727 -7838.5479 8489.6201 C
-7838.4766 8489.5898 -7838.5098 8489.8672 -7838.5146 8489.8184 C
-7838.7666 8489.7969 -7838.7549 8489.5449 -7838.9189 8489.6377 C
-7838.9355 8489.4902 -7839.1255 8489.6855 -7839.2944 8489.7305 C
-7839.3818 8489.8369 -7839.3384 8489.6582 -7839.1914 8489.6426 C
-7839.4268 8489.7666 -7840.3691 8489.9941 -7840.9131 8489.7793 C
-7840.9023 8489.877 -7841.2471 8490.1377 -7841.3721 8490.127 C
-7841.3232 8489.8984 L
-7841.4375 8489.7617 -7841.7422 8489.918 -7841.7632 8489.7227 C
-7842.0303 8490 -7840.7344 8489.4863 -7841.0957 8489.7002 C
-7841.1895 8489.5098 -7841.5991 8490.0645 -7841.5215 8489.7529 C
-7841.7725 8489.7617 -7842.0161 8490.0186 -7842.2559 8489.8047 C
-7842.1865 8489.8418 -7842.0522 8489.4873 -7842.2549 8489.5039 C
-7842.6123 8489.5449 -7842.3564 8489.6133 -7842.6465 8489.6895 C
-7842.8281 8489.7832 L
-7842.8398 8490.0059 -7843.1475 8489.7529 -7843.0146 8490.002 C
-7843.0586 8489.8184 -7843.5337 8490.1152 -7843.4971 8489.7461 C
-7843.4473 8489.4551 L
-7843.6016 8489.4766 -7843.7002 8489.7617 -7843.8213 8489.8896 C
-7843.8418 8489.8633 -7843.8823 8489.8047 -7843.8745 8489.7578 C
-7843.8994 8490.2031 -7844.2432 8489.7207 -7844.4268 8490.0645 C
-7844.7505 8489.9102 -7845.2495 8490.0498 -7845.4023 8489.7734 C
-7845.6514 8489.9082 -7845.8784 8490.0674 -7846.1621 8489.9727 C
-7846.1055 8489.9307 -7846.0283 8489.918 -7846.0122 8489.8223 C
-7846.1904 8489.6914 -7846.2344 8489.8086 -7846.3975 8489.8809 C
-7846.3608 8489.8145 -7846.7539 8489.6201 -7846.9521 8489.4629 C
-7847.1992 8489.5957 -7847.1143 8489.8359 -7847.1392 8489.9824 C
-7847.3652 8489.543 -7847.8379 8490.2656 -7848.1211 8489.8672 C
-7848.0352 8489.8066 -7847.7598 8489.6514 -7847.9658 8489.541 C
-7848.1919 8489.1025 -7848.4219 8489.8643 -7848.7861 8489.6543 C
-7848.6968 8490.0186 L
-7848.8594 8489.793 -7849.2334 8490.2305 -7849.1963 8489.8594 C
-7849.3184 8489.9902 -7849.6265 8489.7383 -7849.5859 8490.0938 C
-7850.1846 8489.793 -7851.0425 8490.2754 -7851.4102 8489.6377 C
-7851.4961 8489.6973 -7851.7104 8489.6367 -7851.6665 8489.8193 C
-7851.5239 8490.0176 -7851.4673 8489.6777 -7851.4141 8489.8125 C
-7851.4912 8489.8232 -7851.5078 8489.9209 -7851.5161 8489.9697 C
-7851.7021 8489.8887 -7851.8486 8489.8633 -7851.6729 8489.5674 C
-7852.0869 8489.3477 -7852.1001 8490.1719 -7852.6274 8490.0322 C
-7852.6035 8489.8857 -7852.6436 8489.8301 -7852.7979 8489.8535 C
-7853.0903 8490.1055 L
-7853.4312 8490.0469 -7853.2842 8489.7705 -7853.2925 8489.5215 C
-7853.4746 8489.5645 -7853.6973 8489.5527 -7853.7803 8489.7383 C
-7854.0015 8489.4258 L
-7853.8398 8489.6514 -7854.1514 8489.5762 -7854.2368 8489.6367 C
-7854.1514 8489.5762 L
-7854.1846 8489.4697 -7854.3955 8489.5352 -7854.5024 8489.5664 C
-7854.4766 8489.7207 -7854.2617 8489.7832 -7854.1445 8489.8281 C
-7854.2373 8489.9375 -7854.3823 8489.9121 -7854.5059 8490.041 C
-7854.4648 8489.7969 -7854.8027 8489.8672 -7854.9473 8489.8418 C
-7855.1133 8489.7891 -7855.1348 8490.0605 -7855.1831 8490.0527 C
-7855.1875 8489.9258 -7855.4541 8490.0313 -7855.3247 8489.8535 C
-7855.2681 8489.8125 -7855.1953 8489.9766 -7855.1016 8489.8643 C
-7855.2109 8489.7705 -7855.1982 8489.5498 -7855.4258 8489.7109 C
-7855.5967 8489.832 -7855.3818 8490.1934 -7855.7061 8490.0391 C
-7855.6211 8489.9785 -7855.6055 8489.8809 -7855.5391 8489.793 C
-7855.8433 8489.666 L
-7855.8564 8489.8887 L
-7855.8975 8489.832 -7855.8691 8489.8125 -7855.8877 8489.7832 C
-7855.9785 8490.0176 -7856.3521 8489.8555 -7856.4209 8490.1191 C
-7856.5742 8490.1426 -7856.7441 8489.9648 -7856.8906 8489.9395 C
-7856.8623 8489.9199 L
-7857.0415 8489.7891 -7857.2793 8489.875 -7857.4297 8490.0254 C
-7857.4219 8489.9766 L
-7857.5195 8489.959 -7857.7505 8489.9941 -7857.8735 8490.125 C
-7858.1201 8489.957 -7857.9561 8489.2842 -7858.2295 8489.5645 C
-7858.48 8489.5723 -7858.6221 8489.9727 -7858.5215 8490.1152 C
-7858.9717 8489.9648 -7859.4834 8490.3281 -7859.9009 8489.9824 C
-7859.9658 8490.0723 -7859.9248 8490.1289 -7860.0586 8490.1816 C
-7860.7197 8490.0938 -7861.4551 8490.4453 -7861.9814 8490.0078 C
-7861.79 8489.9141 -7861.9688 8489.7842 -7861.9727 8489.6582 C
-7862.1309 8489.8574 -7862.1631 8489.4512 -7862.2197 8489.793 C
-7862.2041 8489.9941 -7862.2197 8490.0918 -7862.0337 8490.1729 C
-7862.4282 8490.2813 -7863.0283 8490.2813 -7863.2471 8490.0938 C
-7863.1377 8490.1865 -7863.2227 8490.248 -7863.3086 8490.3086 C
-7863.2803 8489.9873 -7863.5713 8489.9395 -7863.7915 8490.0527 C
-7863.8223 8490.248 L
-7863.9658 8490.0469 L
-7864.0503 8490.1094 -7864.0591 8490.457 -7864.2773 8490.2695 C
-7864.2891 8490.1934 -7864.3018 8490.1162 -7864.3418 8490.0605 C
-7864.5693 8490.2207 -7864.8906 8490.4922 -7865.1377 8490.3262 C
-7865.3398 8490.041 L
-7865.4453 8490.0723 -7865.6235 8490.2441 -7865.4375 8490.3262 C
-7865.8594 8490.1543 -7866.1309 8490.1328 -7866.2646 8489.8857 C
-7866.9912 8490.4873 -7868.0459 8490.5117 -7868.8906 8490.4688 C
-7868.8652 8490.3223 L
-7869.0923 8490.1855 -7868.9834 8490.5781 -7869.1416 8490.4766 C
-7869.0684 8490.3369 -7869.3145 8490.1729 -7869.1362 8490.002 C
-7869.4609 8489.8477 -7869.5547 8490.2559 -7869.7656 8490.3223 C
-7869.7979 8490.5146 -7869.5957 8490.1992 -7869.6367 8490.4434 C
-7869.6729 8490.5117 -7870.0859 8490.293 -7870.1362 8490.584 C
-7870.2178 8490.4697 -7870.1543 8490.2559 -7870.1104 8490.1377 C
-7870.3086 8490.2793 L
-7870.5513 8489.9395 -7869.7559 8489.6719 -7870.0107 8489.2529 C
-7870.1934 8489.2979 L
-7870.3682 8488.9941 -7869.71 8488.9551 -7870.1689 8488.8506 C
-7870.3682 8488.9941 -7870.5381 8489.416 -7870.3608 8489.5449 C
-7870.7754 8489.625 -7870.5527 8490.2383 -7870.9985 8490.2139 C
-7871.1201 8490.043 -7870.6416 8490.1729 -7870.7275 8489.9336 C
-7870.9375 8489.6992 -7871.1484 8490.0645 -7871.3354 8489.9824 C
-7871.1279 8490.0918 -7871.3032 8490.3857 -7871.4375 8490.4395 C
-7871.6641 8490.3018 -7871.29 8490.1641 -7871.6113 8490.1338 C
-7871.6641 8490.3018 -7871.9595 8490.4277 -7871.7041 8490.5449 C
-7871.8203 8490.9258 -7872.0381 8490.4395 -7872.2129 8490.7344 C
-7872.3174 8490.4658 -7871.8823 8490.1152 -7872.2354 8489.9814 C
-7872.1792 8490.2393 -7872.6704 8490.332 -7872.4839 8490.7139 C
-7872.6221 8490.6406 -7872.6367 8490.4375 -7872.5361 8490.2793 C
-7872.7334 8490.1201 -7873.0151 8490.75 -7873.0801 8490.2383 C
-7873.1479 8490.502 L
-7873.21 8490.416 -7873.2983 8490.3506 -7873.3994 8490.209 C
-7873.5732 8490.2041 -7873.96 8490.5664 -7873.9443 8490.168 C
-7874 8490.209 -7874.3975 8490.1914 -7874.2441 8490.4658 C
-7873.9971 8490.6338 -7873.96 8490.2656 -7873.8223 8490.6377 C
-7873.9971 8490.334 -7874.1787 8490.6777 -7874.3213 8490.7793 C
-7874.3447 8490.625 L
-7874.4297 8490.6855 -7874.6255 8490.6514 -7874.6787 8490.8184 C
-7874.6133 8490.7305 -7874.6475 8490.625 -7874.7148 8490.5879 C
-7874.8042 8490.8223 L
-7875.1494 8490.9395 -7874.8857 8490.4102 -7875.2217 8490.4785 C
-7874.9663 8490.2969 L
-7875.0225 8490.3359 -7875.1367 8490.1162 -7875.2979 8490.1895 C
-7875.3604 8490.4033 -7875.4775 8490.6602 -7875.5313 8490.8262 C
-7875.7207 8490.9199 -7875.6162 8490.585 -7875.8027 8490.8047 C
-7875.5586 8490.5469 L
-7875.5215 8490.4766 -7875.7231 8490.1934 -7875.9761 8490.1992 C
-7876.1377 8490.2734 -7876.3887 8490.582 -7876.1338 8490.6992 C
-7876.2607 8490.7031 -7876.4385 8490.5723 -7876.3379 8490.416 C
-7876.6255 8490.4902 -7876.2998 8490.6465 -7876.5479 8490.7793 C
-7876.6494 8490.6367 -7876.9658 8490.4336 -7877.1563 8490.2266 C
-7876.8975 8489.8682 L
-7877.0693 8489.8643 L
-7876.8467 8489.5781 -7877.1826 8489.6465 -7877.0566 8489.3438 C
-7877.1743 8489.2969 -7877.3169 8489.3994 -7877.4307 8489.4785 C
-7877.0864 8489.9629 -7877.8159 8490.1406 -7877.7158 8490.582 C
-7878.1875 8490.7031 -7878.0107 8489.5078 -7878.5024 8490.1992 C
-7878.4219 8490.3145 -7878.6533 8490.6504 -7878.3564 8490.5225 C
-7878.6494 8490.4746 -7878.5557 8490.9658 -7878.9014 8490.7832 C
-7878.6455 8490.6016 -7879.1763 8490.3359 -7878.8066 8490.0723 C
-7878.8311 8490.2178 -7878.6001 8490.1826 -7878.5435 8490.1426 C
-7878.6641 8489.9727 -7878.5186 8489.6973 -7878.8184 8489.6973 C
-7879.0015 8489.7393 -7879.2524 8489.748 -7879.2158 8489.9785 C
-7879.2085 8490.2314 -7878.9365 8489.9512 -7879.0537 8490.207 C
-7879.4185 8490.2949 -7879.4795 8489.9102 -7879.6304 8490.3594 C
-7879.3999 8490.3232 -7879.3423 8490.584 -7879.3467 8490.7578 C
-7879.6143 8490.8633 L
-7879.5625 8490.6953 L
-7879.9922 8490.5742 -7879.6895 8491 -7880.1055 8490.9551 C
-7880.3008 8490.623 L
-7880.2017 8490.3369 -7879.6953 8490.75 -7879.7695 8490.2842 C
-7880.04 8490.2656 -7880.1299 8490.502 -7880.3848 8490.3818 C
-7880.3281 8490.3418 -7880.2505 8490.3301 -7880.1943 8490.2891 C
-7880.2915 8490.2734 -7880.3877 8489.6563 -7880.7734 8490.0176 C
-7880.9727 8490.1582 -7880.8262 8490.1826 -7880.8311 8490.3574 C
-7881.2656 8490.4102 -7881.3955 8490.5879 -7881.6753 8490.6152 C
-7881.6177 8490.2754 -7882.1699 8490.582 -7881.8608 8490.2344 C
-7881.7188 8490.4336 -7881.0903 8490.4141 -7880.9365 8490.0898 C
-7881.0947 8489.6865 -7880.5952 8490.1465 -7880.5024 8489.7383 C
-7880.8506 8489.7285 -7880.8335 8489.332 -7880.8896 8489.0723 C
-7880.9863 8489.0537 -7881.0801 8489.1641 -7881.1377 8489.2041 C
-7881.1787 8489.4482 -7881.0522 8489.4453 -7881.0449 8489.6973 C
-7881.4336 8489.6309 -7881.8081 8489.7666 -7882.0225 8490.0059 C
-7882.1523 8489.8848 -7882.1113 8489.6406 -7881.9575 8489.6162 C
-7882.4199 8489.6895 -7882.9141 8489.6563 -7883.3535 8489.582 C
-7883.0693 8489.9814 -7883.8433 8489.6758 -7883.6494 8490.0078 C
-7883.4141 8490.0977 -7883.2119 8490.3818 -7883.3418 8490.5605 C
-7883.4888 8490.5352 -7883.3369 8490.3857 -7883.3984 8490.3008 C
-7883.5859 8490.5186 -7883.6895 8489.9512 -7883.8735 8490.2949 C
-7883.4512 8490.166 -7883.7915 8489.8086 -7883.7139 8489.4961 C
-7884.0186 8489.6719 -7883.7007 8489.2734 -7884.0024 8489.2734 C
-7884.3057 8489.4473 -7884.6787 8489.584 -7885.0161 8489.6514 C
-7885.4399 8489.3555 -7886.0898 8489.6465 -7886.4683 8489.6582 C
-7886.6665 8489.5 -7886.5322 8489.1465 -7886.7471 8489.085 C
-7886.9995 8489.0918 -7886.5601 8489.4658 -7886.9336 8489.3047 C
-7886.8975 8489.2344 L
-7887.0107 8489.3154 -7887.5825 8488.9941 -7887.6929 8489.502 C
-7887.5776 8489.1191 L
-7887.6475 8489.084 -7887.7119 8489.1719 -7887.7695 8489.2129 C
-7887.7725 8489.0879 -7887.8535 8488.9746 -7887.7402 8488.8926 C
-7887.9707 8488.6289 -7888.2241 8488.9346 -7888.4746 8488.9453 C
-7888.3135 8489.1719 L
-7888.7422 8489.3496 -7889.0293 8489.125 -7889.4443 8489.2041 C
-7889.4316 8488.9824 L
-7889.6787 8489.1152 L
-7889.6182 8488.8994 -7889.8447 8488.7617 -7889.9751 8488.9414 C
-7889.3335 8488.3984 L
-7889.1553 8488.5293 -7889.5283 8488.666 -7889.4165 8488.8848 C
-7889.3213 8489.0762 -7888.9375 8489.0146 -7888.8755 8488.8018 C
-7889.0225 8488.7773 -7889.0293 8488.8262 -7889.1436 8488.9063 C
-7889.1919 8488.5977 -7888.9688 8488.6094 -7888.8584 8488.4033 C
-7888.9355 8488.416 -7889.0449 8488.3223 -7889.0615 8488.4199 C
-7888.9102 8488.2695 -7888.7578 8488.2461 -7888.5059 8488.2383 C
-7888.6763 8488.3594 -7888.4131 8488.4297 -7888.4775 8488.5176 C
-7888.4575 8488.2461 -7888.2168 8488.1621 -7887.9053 8488.2383 C
-7887.6831 8488.5527 -7887.3208 8488.0361 -7886.96 8488.123 C
-7887.1064 8488.3984 -7887.2935 8488.6191 -7887.5127 8488.7305 C
-7887.2861 8488.8682 -7887.2607 8488.7227 -7887.0337 8488.8613 C
-7886.9238 8488.6563 -7886.8457 8488.3418 -7886.5503 8488.2168 C
-7886.5342 8488.4199 L
-7886.2666 8488.3154 -7886.2666 8488.0146 -7885.9258 8488.0723 C
-7885.3418 8488.1719 -7884.7407 8488.1719 -7884.2949 8488.1973 C
-7884.2783 8488.3994 L
-7884.0303 8487.9658 -7883.4521 8488.2393 -7883.1182 8488.0469 C
-7882.5503 8488.2422 -7881.8848 8487.8535 -7881.5938 8488.2031 C
-7880.5913 8488.0469 -7879.7148 8487.8945 -7878.6768 8487.9688 C
-7878.8516 8488.2637 L
-7878.6655 8488.0469 -7878.7305 8488.4336 -7878.5479 8488.3896 C
-7878.7578 8488.1543 -7878.2949 8488.084 -7878.1665 8487.9033 C
-7877.7041 8488.1328 -7877.1104 8487.8818 -7876.7007 8487.6758 C
-7876.6846 8487.8789 L
-7876.2705 8487.498 -7875.7759 8487.832 -7875.2598 8487.8945 C
-7875.2007 8487.9785 -7875.1074 8488.1689 -7874.9536 8488.1465 C
-7874.6738 8487.8184 -7874.5273 8487.8418 -7874.1167 8487.6367 C
-7873.8169 8487.6367 -7873.3301 8487.7178 -7873.0254 8487.8457 C
-7871.8975 8487.3848 -7870.7456 8487.6797 -7869.5732 8487.4023 C
-7869.4888 8487.6406 L
-7868.3521 8487.1309 -7866.9541 8487.5938 -7865.9839 8487.332 C
-7866.0776 8487.7393 L
-7865.7734 8487.8643 -7865.3843 8487.6328 -7865.4619 8487.3438 C
-7865.1567 8487.4688 -7864.7007 8487.1465 -7864.5068 8487.4814 C
-7864.1953 8487.5566 -7864.1255 8487.293 -7863.8662 8487.2383 C
-7863.2422 8487.3926 -7863.0107 8487.3574 -7862.4224 8487.2813 C
-7862.5684 8487.2559 L
-7862.6328 8487.3457 -7862.6387 8487.5186 -7862.4922 8487.5449 C
-7862.2725 8487.4307 -7861.6846 8487.6543 -7861.9033 8487.168 C
-7861.2754 8487.4482 -7860.4385 8486.9395 -7859.8271 8487.3184 C
-7859.8789 8487.1855 -7859.7246 8487.1602 -7859.6602 8487.0703 C
-7859.1089 8487.0645 -7858.5293 8487.3359 -7858.0898 8487.1094 C
-7858.0024 8487.1758 -7858.2295 8487.3359 -7858.0049 8487.3496 C
-7857.8721 8487.2979 -7858.0024 8487.1758 -7857.8384 8487.1016 C
-7856.9453 8486.8535 -7856.0303 8487.3574 -7855.2188 8487.293 C
-7853.7754 8487.0361 -7852.2695 8487.166 -7850.8867 8487.123 C
-7850.9023 8487.2207 L
-7850.4395 8486.8477 -7849.8159 8487.6025 -7849.4463 8487.041 C
-7849.3369 8487.1338 -7849.0283 8487.085 -7849.1094 8487.2734 C
-7848.7407 8487.0098 -7848.0771 8487.5215 -7847.5439 8487.1865 C
-7847.5928 8487.1777 -7847.6211 8487.1973 -7847.6777 8487.2393 C
-7847.1392 8487.4551 -7846.6641 8487.1602 -7846.0957 8487.3555 C
-7846.1533 8487.3975 -7846.2583 8487.4277 -7846.2754 8487.5254 C
-7846.0557 8487.7129 -7845.7549 8487.1133 -7845.6348 8487.584 C
-7845.5088 8487.5801 -7845.5449 8487.3477 -7845.6221 8487.3613 C
-7844.3779 8487.5449 -7843.0498 8487.2441 -7841.7549 8487.1367 C
-7840.8271 8487.418 -7841.6982 8487.9297 -7840.9663 8487.5781 C
-7840.9063 8487.6689 -7840.9229 8487.3984 -7840.9131 8487.4961 C
-7840.6299 8487.3643 -7840.4717 8488.0215 -7840.2754 8487.7754 C
-7840.3564 8487.4863 -7840.1445 8487.6133 -7840.1387 8487.4375 C
-7839.5713 8487.625 -7839.4575 8487.8857 -7839.0098 8487.666 C
-7839.0435 8487.8184 L
-7838.5186 8487.3887 -7837.9102 8487.6191 -7837.4673 8487.123 C
-7834.5728 8487.0322 -7831.7983 8486.7578 -7828.9761 8486.7002 C
-7826.1865 8486.7949 -7823.4551 8486.5723 -7820.6221 8486.8359 C
-7819.9585 8487.2354 -7819.9087 8487.2246 -7819.1797 8487.0625 C
-7819.2095 8487.127 -7819.2549 8487.1426 -7819.2061 8487.2031 C
-7819.1699 8486.875 -7818.6929 8487.1719 -7818.6235 8486.8594 C
-7817.5762 8486.9199 -7816.6113 8486.8301 -7815.5337 8486.8281 C
-7815.7041 8486.8633 -7815.7896 8487.1309 -7815.5869 8487.1094 C
-7815.3755 8486.8994 L
-7815.3408 8486.9922 L
-7815.2021 8486.9434 -7815.0513 8486.7813 -7815.1943 8486.6758 C
-7812.4873 8486.3926 -7809.8242 8487.0498 -7807.1729 8486.9697 C
-7806.5439 8487.1064 -7805.6475 8486.9814 -7804.9629 8486.9141 C
-7802.9355 8487.3506 -7801.1084 8487.7041 -7799.0479 8487.3984 C
-7799.3174 8488.2461 -7800.1675 8488.4414 V
f
-7890.2578 8488.2422 m
-7890.1855 8488.4063 -7889.9497 8488.4961 -7890.1377 8488.7139 C
-7890.1611 8488.5605 -7890.2822 8488.3887 -7890.2578 8488.2422 C
f
-7883.9619 8489.9297 m
-7883.9536 8489.8809 -7883.8721 8489.9961 -7883.8521 8490.0225 C
-7883.9297 8490.0352 -7884.0024 8490.1729 -7884.0645 8490.0879 C
-7883.9854 8490.0762 -7883.9976 8489.998 -7883.9619 8489.9297 C
f
-7882.3521 8490.0273 m
-7882.3765 8490.1729 -7882.7207 8490.2891 -7882.9238 8490.3066 C
-7882.3521 8490.0273 L
f
-7880.8521 8490.6289 m
-7880.7227 8490.752 -7880.7583 8490.8193 -7880.9326 8490.8154 C
-7880.9453 8490.7383 -7880.8877 8490.6992 -7880.8521 8490.6289 C
f
-7880.7456 8490.2969 m
-7880.6211 8490.293 -7880.5591 8490.3789 -7880.4985 8490.4629 C
-7880.5029 8490.3369 -7880.7871 8490.541 -7880.7456 8490.2969 C
f
-7877.4893 8490.7207 m
-7877.4111 8490.709 -7877.2417 8490.5879 -7877.1689 8490.75 C
-7877.2505 8490.6367 -7877.5498 8490.9346 -7877.4893 8490.7207 C
f
-7875.9761 8490.5 m
-7875.9272 8490.5098 -7875.9072 8490.5361 -7875.8506 8490.4961 C
-7875.7607 8490.5625 -7875.8555 8490.6689 -7875.9312 8490.6826 C
-7875.9761 8490.5 L
f
-7848.4287 8489.9141 m
-7848.5923 8489.9863 L
-7848.5684 8489.8418 L
-7848.4287 8489.9141 L
f
-7836.3574 8489.9063 m
-7836.1943 8489.8145 -7836.2441 8490.043 -7836.2168 8490.0645 C
-7836.3643 8490.0801 -7836.1621 8489.8848 -7836.3574 8489.9063 C
f
-7829.8486 8489.1777 m
-7829.8984 8489.1816 L
-7829.8818 8488.8818 L
-7829.8486 8489.1777 L
f
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 5 b. ploch\341/ Adobe ArtOnPath B) -
(rush Tool/ Uhlokresba/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 b. ploch\741)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Uhlokresba)
(1 / Unnamed Brush Pat/ / / / / 5 0.137255 0.121569 0.12549 /  ) -
(1 1 1.2 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registra\750n\755]) 0 Xs
([Registra\750n\755])
Pc
0 0 0 0 1 1 1 Xa
(B\755l\741)
Pc
0.74902 0.678431 0.670588 0.901961 0 0 0 Xa
(\710ern\741)
Pc
0.043137 0.984314 1 0.003922 0.894118 0.137255 0.133333 Xa
(RGB \750erven\741)
Pc
0.070588 0.023529 1 0 0.956863 0.898039 0 Xa
(RGB \636lut\741)
Pc
0.65098 0.078431 1 0.003922 0.403922 0.686275 0.141176 Xa
(RGB zelen\741)
Pc
0.529412 0.027451 0.133333 0 0.431373 0.776471 0.847059 Xa
(RGB azurov\741)
Pc
0.929412 0.823529 0.058824 0.003922 0.196078 0.290196 0.592157 Xa
(RGB modr\741)
Pc
0.313725 0.807843 0.070588 0 0.698039 0.32549 0.588235 Xa
(RGB purpurov\741)
Pc
0.168627 0.980392 0.92549 0.066667 0.756863 0.152941 0.176471 Xa
(R=193 G=39 B=45)
Pc
0.043137 0.980392 0.964706 0.003922 0.894118 0.145098 0.156863 Xa
(R=237 G=28 B=36)
Pc
0.035294 0.788235 0.964706 0 0.913725 0.356863 0.164706 Xa
(R=241 G=90 B=36)
Pc
0.019608 0.501961 0.980392 0 0.94902 0.572549 0.137255 Xa
(R=247 G=147 B=30)
Pc
0.015686 0.345098 0.866667 0 0.968627 0.686275 0.239216 Xa
(R=251 G=176 B=59)
Pc
0.054902 0.019608 0.92549 0 0.972549 0.909804 0.180392 Xa
(R=252 G=238 B=33)
Pc
0.192157 0.023529 0.968627 0 0.843137 0.854902 0.180392 Xa
(R=217 G=224 B=33)
Pc
0.498039 0.047059 0.968627 0 0.560784 0.745098 0.262745 Xa
(R=140 G=198 B=63)
Pc
0.733333 0.078431 0.972549 0 0.286275 0.666667 0.298039 Xa
(R=57 G=181 B=74)
Pc
0.862745 0.172549 1 0.035294 0 0.576471 0.270588 Xa
(R=0 G=146 B=69)
Pc
0.901961 0.333333 1 0.262745 0 0.407843 0.211765 Xa
(R=0 G=104 B=55)
Pc
0.756863 0.070588 0.745098 0 0.215686 0.670588 0.443137 Xa
(R=34 G=181 B=115)
Pc
0.784314 0.090196 0.458824 0 0 0.662745 0.615686 Xa
(R=0 G=169 B=157)
Pc
0.694118 0.152941 0.019608 0 0.192157 0.666667 0.866667 Xa
(R=41 G=171 B=226)
Pc
0.882353 0.533333 0.035294 0 0.066667 0.439216 0.701961 Xa
(R=0 G=113 B=188)
Pc
0.972549 0.956863 0.086275 0.011765 0.2 0.211765 0.541176 Xa
(R=46 G=49 B=146)
Pc
0.984314 0.960784 0.34902 0.294118 0.145098 0.145098 0.345098 Xa
(R=27 G=20 B=100)
Pc
0.760784 0.968627 0.090196 0.011765 0.388235 0.196078 0.529412 Xa
(R=102 G=45 B=145)
Pc
0.513725 0.968627 0.090196 0.007843 0.560784 0.180392 0.52549 Xa
(R=147 G=39 B=143)
Pc
0.356863 1 0.372549 0.105882 0.615686 0.058824 0.368627 Xa
(R=158 G=0 B=93)
Pc
0.117647 1 0.490196 0.007843 0.831373 0.066667 0.352941 Xa
(R=212 G=20 B=90)
Pc
0.039216 0.960784 0.215686 0 0.898039 0.152941 0.47451 Xa
(R=237 G=30 B=121)
Pc
0.227451 0.27451 0.4 0 0.780392 0.698039 0.6 Xa
(R=199 G=178 B=153)
Pc
0.4 0.431373 0.517647 0.066667 0.6 0.52549 0.462745 Xa
(R=153 G=134 B=117)
Pc
0.505882 0.529412 0.607843 0.235294 0.45098 0.388235 0.341176 Xa
(R=115 G=99 B=87)
Pc
0.572549 0.611765 0.631373 0.423529 0.32549 0.27451 0.254902 Xa
(R=83 G=71 B=65)
Pc
0.227451 0.384314 0.643137 0.011765 0.776471 0.611765 0.423529 Xa
(R=198 G=156 B=109)
Pc
0.317647 0.490196 0.741176 0.098039 0.65098 0.486275 0.321569 Xa
(R=166 G=124 B=82)
Pc
0.364706 0.572549 0.847059 0.227451 0.545098 0.384314 0.219608 Xa
(R=140 G=98 B=57)
Pc
0.396078 0.639216 0.933333 0.360784 0.454902 0.298039 0.141176 Xa
(R=117 G=76 B=36)
Pc
0.415686 0.694118 0.960784 0.490196 0.376471 0.223529 0.082353 Xa
(R=96 G=56 B=19)
Pc
0.482353 0.733333 0.819608 0.682353 0.254902 0.133333 0.066667 Xa
(R=66 G=33 B=11)
Pc
Bb
2 (Line\741rn\755 p\770echod 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Line\741rn\755 p\770echod 1)
Pc
Bb
0 0 0 0 Bh
2 (Kruhov\775 p\770echod 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Kruhov\775 p\770echod 1)
Pc
Bb
2 (Line\741rn\755 p\770echod 2) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Line\741rn\755 p\770echod 2)
Pc
Bb
0 0 0 0 Bh
2 (Kruhov\775 p\770echod 2) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Kruhov\775 p\770echod 2)
Pc
(Vzorek posunut\775ch \750tverc\771) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Vzorek posunut\775ch \750tverc\771)
Pc
0 g
(K=100)
Pc
0.1 g
(K=90)
Pc
0.2 g
(K=80)
Pc
0.3 g
(K=70)
Pc
0.4 g
(K=60)
Pc
0.5 g
(K=50)
Pc
0.6 g
(K=40)
Pc
0.7 g
(K=30)
Pc
0.8 g
(K=20)
Pc
0.9 g
(K=10)
Pc
0.95 g
(R=241 G=241  B=242)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Vrstva 1) Ln
0 A
1 A
1 Ap
0 O
0 J 0 j 1 w 4 M []0 d0 XR
700 0 m
-100 0 L
-100 600 L
700 600 L
700 0 L
Bb
1 (Unnamed gradient 2) -100 300 0 800 1 0 0 1 0 0 Bg
800 0 0 -604 -100 602 Xm
7794 0 0 -604 -7894 602 Bc
800 0 0 -604 -100 602 Bm
7794 0 0 -604 700 602 Bc
f
0 BB
0 A
u
u
0 Ap
452.2578 418.1982 m
450.6182 419.1416 450.7578 418.5547 449.7539 416.8428 C
448.3975 418.2324 447.1963 418.9756 446.4482 417.8115 C
445.6201 416.9775 444.9014 415.6885 443.8232 415.9004 C
442.5869 416.7686 441.4795 417.1025 440.6309 416.3418 C
440.0498 414.4648 438.6885 415.8564 438.042 414.2559 C
437.6191 416.0332 437.9434 414.6719 436.752 416.2041 C
434.6855 419.6963 435.0078 414.0264 433.7803 414.4355 C
433.2676 414.2119 432.5039 414.9258 431.6152 415.8926 C
431.3037 414.4502 429.9355 417.168 429.7168 414.6357 C
426.8271 416.3877 425.6826 410.8389 422.3535 414.4287 C
422.7725 412.6748 422.8643 411.4326 421.96 413.9326 C
422.2012 411.6299 421.3379 413.5078 421.2441 412.1846 C
420.1074 413.4902 420.2109 410.4766 419.1934 413.0088 C
418.5186 414.1084 418.25 414.3721 418.3564 413.9346 C
417.8662 412.54 417.0654 414.1611 417.2607 412.0479 C
417.3457 410.4072 417.25 409.9463 416.7695 410.2354 C
415.1006 410.3174 413.1318 411.6709 412.2822 411.7842 C
411.1855 407.7578 408.8369 408.75 406.2129 410.7441 C
404.9678 406.9541 402.3018 408.958 399.8633 409.9033 C
397.3828 411.0225 394.7529 412.6436 393.5713 408.1758 C
391.9775 405.4121 388.9082 408.7842 386.8447 407.9443 C
385.0557 407.6787 381.8389 412.5244 380.3984 409.4014 C
377.583 412.0293 376.25 407.9082 373.9785 407.499 C
371.7344 406.9893 369.1807 407.5557 367.1582 405.9951 C
363.793 410.0635 363.2168 402.5732 360.7725 403.3291 C
360.0449 403.7803 359.8711 401.5029 358.7734 402.9219 C
358.0078 402.9365 357.4697 401.8613 356.208 403.9063 C
355.792 399.1875 353.4297 403.0342 352.1211 405.0674 C
351.5615 401.3818 348.2549 408.1016 347.3262 404.2354 C
344.5459 408.1201 343.4443 404.3271 341.8672 402.3135 C
338.6826 407.0225 337.7549 402.0693 335.5977 402.4893 C
334.1992 399.7266 331.5264 402.5049 329.5615 402.9873 C
327.6816 407.3945 328.2988 404.8135 328.3691 404.5146 c
328.9678 402.0127 327.9443 406.2988 328.582 403.1982 c
329.083 400.6738 329.4063 398.4512 328.4482 400.7432 C
326.4063 403.2637 326.7324 396.5127 324.832 399.5088 C
324.6406 397.8311 324.5547 395.8252 322.9971 400.0537 C
322.0791 401.6035 321.583 401.4668 320.6963 403.0322 C
319.9443 401.8682 318.3086 404.6152 317.1963 405.1846 C
316.0146 406.0381 315.0537 405.9619 314.5088 403.9326 C
314.3398 401.1982 313.4922 401.5176 312.6592 401.8623 C
311.9209 403.3828 311.2666 404.5742 310.8135 404.9326 c
310.3613 405.29 310.1104 404.8145 310.1748 403.0068 C
308.4922 403.9131 307.3975 402.2471 305.2646 403.8486 C
303.918 405.1709 302.7871 405.8135 302.0098 405.1924 c
301.2373 404.5459 301.0615 401.6201 299.7832 403.5225 C
299.4355 397.8701 296.0146 405.1094 294.7568 403.2646 C
293.8271 400.042 291.4941 402.6553 289.7754 402.5908 C
287.9707 398.2734 285.0332 398.4395 282.0215 398.8008 C
278.6934 400.4775 275.8799 399.8838 272.8027 400.3682 C
269.3438 402.4541 267.8096 396.4736 264.0342 399.9531 C
260.3291 403.1475 259.4482 394.6104 254.9219 401.5332 C
252.1523 401.1035 248.1367 406.0947 246.0449 403.3486 C
243.5303 402.377 241.4268 399.9971 238.4063 401.875 C
236.0781 400.8594 233.4473 401.5371 232.0537 397.5771 C
229.9258 396.6787 229.8242 387.8477 225.5371 397.1709 C
224.3105 392.8301 220.9434 397.6533 219.5972 394.1865 C
217.9248 392.085 216.1748 390.4678 214.2026 389.8867 c
212.2363 389.2783 210.7988 386.5684 208.4614 387.6729 C
206.5977 386.7881 204.79 385.7295 202.5034 386.6689 C
201.0146 384.2705 198.355 386.7627 196.8589 384.3379 C
194.0918 387.2217 192.3301 385.8467 190.1553 386.083 C
187.3931 388.7744 184.9268 390.1182 182.9951 389.0625 C
182.0918 383.6953 179.1309 386.7744 176.8735 386.6855 C
175.835 387.71 176.3369 382.3701 175.4639 382.8887 C
174.8105 382.4932 173.9365 383.1289 172.7437 385.2451 C
171.9404 382.8555 171.8306 378.1396 169.7378 382.5703 C
170.665 373.5107 168.9995 376.167 167.4229 379.1006 C
166.3955 379.7354 166.8857 374.6709 166.0581 375.5488 C
165.3438 375.9502 166.1201 370.5527 165.3853 371.6865 C
165.3877 369.7393 161.1743 377.7002 161.7817 373.4375 C
162.0566 372.2861 159.5117 376.9023 158.5806 373.4814 C
157.3579 371.8779 155.835 370.4561 154.3477 371.4463 C
154.5024 371.0352 154.6948 370.4941 154.9341 369.7881 C
155.5903 368.335 155.5835 370.0811 156.5229 367.8779 C
155.9155 365.249 153.0708 371.9844 152.2734 369.7217 C
150.4058 371.9326 149.1494 371.1592 147.5459 370.9795 C
144.0474 370.1123 142.8286 367.6533 139.3398 367.1719 C
135.0894 369.8779 133.0894 363.6064 128.4873 369.0752 C
125.2095 371.8799 123.3623 368.5049 120.3003 370.0713 C
116.7314 373.7568 115.4932 367.5439 111.8311 371.3838 C
109.7476 368.6162 106.0532 372.4902 103.2017 372.7959 C
101.6704 370.4775 98.9502 373.1143 96.7446 373.7256 C
95.5356 373.7842 93.7432 374.3018 91.8564 374.5361 C
89.9429 374.8818 88.0015 374.6709 86.4063 373.6338 C
85.5903 371.9111 84.5684 371.3213 83.9517 369.7021 C
82.793 370.3525 81.9248 370.4512 81.3911 370.2002 C
80.7549 370.3721 79.7446 373.165 79.1582 375.6162 C
78.0786 374.3926 76.4507 375.1719 75.1504 374.3604 C
74.0107 372.873 72.6411 372.1289 71.1831 371.5938 C
69.646 371.3926 67.3032 374.3945 65.9961 372.9766 C
64.1782 373.6885 63.1187 371.1357 61.8848 369.2793 C
60.1519 369.5088 58.7334 368.3936 57.3589 367.126 C
56.27 364.6611 54 367.1729 52.626 366.0313 C
52.3955 366.9971 52.957 364.6475 52.6689 365.4219 C
52.5781 365.3691 52.0474 366.7285 51.1743 368.6602 C
48.2622 370.5049 46.8579 366.4756 43.8696 369.2881 C
42.5039 370.1611 41.3442 370.2246 40.4219 369.3232 C
39.2827 369.335 38.8857 366.2637 37.729 366.3721 C
36.0439 363.9639 34.4146 361.332 31.6323 363.3193 C
29.0093 364.6396 27.2041 362.3389 24.2271 364.5205 C
23.1909 362.9951 21.1177 365.9287 19.5586 366.832 C
18.8433 367.0176 17.4482 370.0732 17.293 367.9785 C
16.9663 366.5986 16.6279 365.2969 16.4556 363.3369 C
14.9653 364.4326 13.9878 363.5264 13.0645 362.6025 C
12.1885 361.4844 11.0151 361.8213 10.3906 360.125 C
9.58203 360.9258 8.60107 362.2803 8.07959 361.5801 C
7.53418 360.9854 7.12891 359.665 6.51611 359.1064 C
5.42432 357.4307 4.29053 355.499 2.64551 355.4873 C
1.70557 355.9775 0.790039 356.3096 -0.012207 356.1396 c
-0.814453 355.9697 -1.50439 355.3037 -1.99316 353.793 C
-3.43115 352.7061 -5.18164 352.9238 -6.54297 351.7256 C
-8.44141 352.7773 -9.99121 355.8164 -10.8599 352.5957 C
-11 346.2725 -13.9575 351.3135 -15.416 349.9824 C
-16.4868 348.6709 -17.6138 348.1885 -19.353 350.6445 C
-20.4351 350.3555 -22.0098 352.5137 -22.5547 350.5459 C
-24.3208 353.6904 -25.0493 352.6748 -26.4648 354.5186 c
-27.8462 356.2236 -28.9741 356.8506 -29.2817 353.8301 C
-29.0444 351.1162 -29.3022 350.4746 -29.6094 350.4688 c
-29.918 350.4619 -30.2734 351.0889 -30.2295 350.9072 C
-32.8599 357.6025 -35.5034 363.4941 -35.2212 356.2861 C
-36.5479 355.8037 -40.396 365.0117 -41.2144 360.6865 C
-42.8296 359.6943 -44.2871 357.1719 -48.1328 363.7881 C
-51.5879 368.7666 -52.5181 362.3232 -55.8999 365.2734 C
-57.2583 367.5117 -55.8735 361.7197 -56.8486 362.3525 C
-60.7803 361.5752 -63.9526 358.7686 -67.876 359.4854 C
-71.3823 358.459 -73.7192 352.9248 -78.0083 355.1729 C
-82.6357 358.834 -83.2979 345.5303 -88.8184 351.3994 C
-89.77 346.7666 -92.7036 349.5635 -95.3267 351.1406 C
-97.7056 354.0957 -98.7021 351.3115 -100 350.2227 C
-100 125.7178 L
-99.4561 126.376 -98.9053 127.0918 -98.353 127.6738 C
-96.4009 122.7959 -94.2715 128.0205 -92.2617 127.625 C
-90.2124 130.5557 -88.2847 127.6943 -86.4785 127.2334 C
-85.7324 122.6426 -85.6992 125.3428 -85.6938 125.6533 c
-85.6592 128.2686 -85.7163 123.7861 -85.5752 127.0313 c
-85.4399 129.6729 -85.21 131.999 -84.8394 129.6123 C
-83.4624 127.0088 -82.1133 134.0947 -80.9951 130.9893 C
-80.3936 132.7539 -79.813 134.8643 -79.3345 130.4551 C
-78.8203 128.8477 -78.3027 129.0029 -77.8198 127.375 C
-76.7969 128.6152 -75.877 125.7646 -74.9277 125.1904 C
-73.9829 124.3203 -73.0249 124.4219 -71.9912 126.5615 C
-71.1494 129.4395 -70.3984 129.123 -69.6689 128.7803 C
-69.3232 127.1963 -68.9775 125.959 -68.6235 125.5908 c
-68.2695 125.2246 -67.9058 125.7314 -67.5225 127.6299 C
-66.1006 126.7129 -64.6167 128.4863 -62.9268 126.8506 C
-61.9375 125.4912 -60.9893 124.8398 -60.0747 125.5107 c
-59.1602 126.2041 -58.2651 129.2813 -57.4849 127.3125 C
-55.7485 133.2559 -54.1899 125.7246 -52.5039 127.6904 C
-50.7974 131.0967 -49.1611 128.4014 -47.4658 128.5068 C
-44.6309 133.0811 -41.8003 132.9697 -38.9438 132.6533 C
-36.103 130.9658 -33.2026 131.6514 -30.313 131.208 C
-27.4448 129.0908 -24.4648 135.4063 -21.6318 131.8311 C
-18.7969 128.5547 -15.8267 137.543 -13.1089 130.3691 C
-10.2949 130.8779 -7.59961 125.7236 -4.87402 128.6523 C
-2.17432 129.7275 0.471191 132.2734 2.96143 130.3662 C
5.49023 131.4824 7.89551 130.8291 10.2397 135.0186 C
12.54 136.0078 14.8223 145.2861 16.7139 135.584 C
18.9858 140.1719 21.0869 135.1777 23.2598 138.8457 C
25.4155 141.0898 27.5278 142.8281 29.5996 143.4805 c
31.6733 144.1621 33.7495 147.042 35.7642 145.9307 C
37.8047 146.8994 39.834 148.0498 41.8394 147.1133 C
43.8882 149.6641 45.874 147.1045 47.938 149.6836 C
49.9307 146.7139 51.9941 148.1953 54.064 147.9961 C
56.1001 145.2285 58.1807 143.8691 60.3325 145.0186 C
62.5405 150.6768 64.6763 147.5049 66.9063 147.6475 C
67.6704 146.5957 68.4976 152.1895 69.2236 151.667 C
69.9595 152.0977 70.6587 151.4492 71.3022 149.252 C
72.6792 151.7773 73.9521 156.7354 74.9043 152.125 C
75.7363 158.0625 77.8071 154.7354 79.5259 150.2969 C
79.0884 151.8818 78.5923 153.7051 78.0254 155.8203 C
78.8735 155.1758 84.0215 147.7158 84.6138 146.8105 C
85.2129 146.4023 85.7876 152.0566 86.2256 150.8809 C
86.7051 152.9287 87.084 151.0469 87.5435 155.5107 C
87.5576 156.7129 88.9067 151.917 90.6641 155.5332 C
92.2563 157.2402 94.0967 158.7695 95.3076 157.7607 C
95.2568 158.1895 95.2026 158.7539 95.1436 159.4922 C
94.8608 161.0039 94.4355 159.1689 94.061 161.4629 C
95.3047 164.2373 96.4238 157.2256 97.7627 159.6191 C
99.0425 157.335 100.4629 158.1738 102.0752 158.3984 C
105.7124 159.3818 109.2886 155.6055 112.8188 156.1846 C
116.3081 153.4346 115.4395 172.8389 118.5898 167.1885 C
121.1035 164.3145 123.7437 167.9014 126.3521 166.3193 C
128.9326 162.5273 131.6787 169.0791 134.313 165.125 C
137.0347 168.0771 139.6909 164.0869 142.4058 163.8271 C
144.4756 166.2959 146.4844 163.585 148.4912 162.9902 C
149.6597 162.9531 151.2852 162.4502 153.0723 162.2441 C
154.8584 161.9209 156.811 162.1855 158.627 163.3096 C
159.8516 165.1367 160.9966 165.7793 161.9995 167.4932 C
162.9731 166.833 163.7979 166.75 164.3809 167.0244 C
164.9619 166.8574 165.2598 163.9473 165.2271 161.3828 C
166.5859 162.6924 167.9854 161.9082 169.4585 162.7871 C
170.9409 164.373 172.4644 165.1865 174.0225 165.7803 C
175.5762 166.0254 177.126 162.9229 178.7559 164.4404 C
180.3574 163.7305 182.0244 166.4346 183.6909 168.4121 C
185.3276 168.209 186.9922 169.4102 188.6499 170.7705 C
190.3232 173.3848 191.9229 170.793 193.5503 172.0244 C
193.5361 171.0146 193.5679 173.4688 193.6582 172.6631 C
193.7603 172.7197 193.9434 171.3037 194.3198 169.2949 C
196.7129 167.417 199.082 171.6807 201.3105 168.792 C
202.4302 167.9014 203.5488 167.8623 204.6743 168.8301 C
205.7871 168.8398 206.9336 172.0762 208.0371 171.9873 C
210.2813 174.5537 212.5254 177.3535 214.7559 175.3232 C
216.9961 173.9932 219.332 176.4502 221.7031 174.2227 C
223.0918 175.8496 224.3965 172.8135 225.6992 171.8965 C
226.3535 171.7178 226.9629 168.5361 227.6309 170.7393 C
228.291 172.1953 228.9434 173.5713 229.5977 175.6328 C
230.7852 174.5156 231.9648 175.4893 233.0957 176.4795 C
234.2305 177.6719 235.2949 177.3428 236.3262 179.1396 C
236.918 178.3145 237.541 176.915 238.2246 177.6611 C
238.9063 178.2959 239.627 179.6934 240.3672 180.291 C
241.8477 182.0752 243.4336 184.1318 245.0449 184.1768 C
245.8457 183.6816 246.6582 183.3555 247.4844 183.5508 c
248.3125 183.7451 250.0078 171.4531 250.8613 173.0498 C
252.5352 174.2217 254.1953 174.0322 255.8223 175.3213 C
257.418 174.2549 258.1855 171.0967 259.8301 174.501 C
261.5293 181.1445 263.1758 175.9121 264.9316 177.3408 C
266.3027 178.7422 267.5273 179.2754 268.6191 176.7324 C
269.75 177.0576 270.7578 174.8262 271.7754 176.9043 C
272.7266 173.6377 273.6895 174.7217 274.6191 172.8125 c
275.5488 171.0557 276.498 170.4199 277.5469 173.6006 C
277.9824 176.4463 278.3945 177.124 278.6973 177.1377 c
278.998 177.1514 278.334 189.5088 278.3359 189.6973 C
279.2559 182.7207 280.3867 176.5908 281.8887 184.1572 C
283.3066 184.6904 284.7969 175.1006 286.666 179.6621 C
288.4902 180.7383 290.5391 183.4209 292.668 176.5547 C
294.8164 171.3975 297.3184 178.1855 299.8965 175.1611 C
300.6738 172.8379 300.75 178.8926 301.5488 178.249 C
305.5859 179.1504 309.3828 182.165 313.043 181.4971 C
316.7246 182.6514 320.3789 188.5146 324.0215 186.2471 C
327.6406 182.501 331.5801 196.4902 335.5254 190.4443 C
337.6016 195.3311 339.7832 192.4551 341.957 190.8555 C
344.1016 186.7588 346.3633 193.4707 348.2852 192.1914 C
351.4453 192.4424 354.4629 193.0693 357.2813 194.8135 C
359.2363 194.3926 361.1367 193.5078 362.9902 196.6934 C
365.3965 196.2354 368.0332 197.4697 370.7461 197.2334 C
373.4316 194.4502 376.2891 197.6895 379.1172 198.3955 C
380.6895 195.2959 382.375 201.1875 383.1777 201.1348 C
384.748 197.6592 386.9453 196.6182 389.4648 202.29 C
391.9648 206.4844 394.6641 208.3965 397.1582 204.9102 C
399.1582 202.376 401.2383 203.5117 403.3711 206.3018 C
406.8594 206.8242 410.4434 207.9219 414.0371 207.4902 C
417.5742 202.5596 421.2539 206.4766 424.8809 207.7363 C
428.4805 206.6182 432.0488 204.6826 435.6094 207.5703 C
438.8242 207.0674 442.0508 207.4131 443.6855 209.4922 C
446.9697 207.1582 449.9873 210.665 452.834 209.457 C
452.834 418.9238 L
452.6328 418.915 452.4395 418.7266 452.2578 418.1982 C
Bb
1 (Unnamed gradient 52) -100 271.7539 0 552.834 1 0 0 1 0 0 Bg
552.834 0 0 -301.0537 -100 421.6963 Xm
7794 0 0 -301.0537 -7894 421.6963 Bc
552.834 0 0 -301.0537 -100 421.6963 Bm
7794 0 0 -301.0537 452.834 421.6963 Bc
f
0 BB
u
440.8516 209.0352 m
439.2168 206.9561 438.8242 212.9668 435.6094 213.4697 C
432.0488 210.582 428.4805 212.5176 424.8809 213.6357 C
421.2539 212.376 417.5742 208.459 414.0371 213.3896 C
410.4434 213.8213 406.8594 212.7236 403.3711 212.2012 C
401.2383 209.4111 399.1582 208.2754 397.1582 210.8096 C
394.6641 214.2959 391.9648 212.3838 389.4648 208.1895 C
386.9453 202.5176 384.748 203.5586 383.1777 207.0342 C
382.375 207.0869 380.6895 201.1953 379.1172 204.2949 C
376.2891 203.5889 373.4316 200.3496 370.7461 203.1328 C
368.0332 203.3691 365.3965 202.1348 362.9902 202.5928 C
361.1367 199.4072 359.2363 200.292 357.2813 200.7129 C
354.4629 198.9688 351.4453 198.3418 348.2852 198.0908 C
346.3633 199.3701 344.1016 192.6582 341.957 196.7549 C
339.7832 198.3545 337.6016 201.2305 335.5254 196.3438 C
331.5801 202.3896 327.6406 188.4004 324.0215 192.1465 C
320.3789 194.4141 316.7246 188.5508 313.043 187.3965 C
309.3828 188.0645 305.5859 185.0498 301.5488 184.1484 C
300.75 184.792 300.6738 178.7373 299.8965 181.0605 C
297.3184 184.085 294.8164 177.2969 292.668 182.4541 C
290.5391 189.3203 288.4902 186.6377 286.666 185.5615 C
284.7969 181 283.3066 190.5898 281.8887 190.0566 C
280.3867 182.4902 279.2559 188.6201 278.3359 195.5967 C
278.334 195.4082 278.998 183.0508 278.6973 183.0371 c
278.3945 183.0234 277.9824 182.3457 277.5469 179.5 C
276.498 176.3193 275.5488 176.9551 274.6191 178.7119 c
273.6895 180.6211 272.7266 179.5371 271.7754 182.8037 C
270.7578 180.7256 269.75 182.957 268.6191 182.6318 C
267.5273 185.1748 266.3027 184.6416 264.9316 183.2402 C
263.1758 181.8115 261.5293 187.0439 259.8301 180.4004 C
258.1855 176.9961 257.418 180.1543 255.8223 181.2207 C
254.1953 179.9316 252.5352 180.1211 250.8613 178.9492 C
250.0078 177.3525 248.3125 189.6445 247.4844 189.4502 c
246.6582 189.2549 245.8457 189.5811 245.0449 190.0762 C
243.4336 190.0313 241.8477 187.9746 240.3672 186.1904 C
239.627 185.5928 238.9063 184.1953 238.2246 183.5605 C
237.541 182.8145 236.918 184.2139 236.3262 185.0391 C
235.2949 183.2422 234.2305 183.5713 233.0957 182.3789 C
231.9648 181.3887 230.7852 180.415 229.5977 181.5322 C
228.9434 179.4707 228.291 178.0947 227.6309 176.6387 C
226.9629 174.4355 226.3535 177.6172 225.6992 177.7959 C
224.3965 178.7129 223.0918 181.749 221.7031 180.1221 C
219.332 182.3496 216.9961 179.8926 214.7559 181.2227 C
212.5254 183.2529 210.2813 180.4531 208.0371 177.8867 C
206.9336 177.9756 205.7871 174.7393 204.6743 174.7295 C
203.5488 173.7617 202.4302 173.8008 201.3105 174.6914 C
199.082 177.5801 196.7129 173.3164 194.3198 175.1943 C
193.9434 177.2031 193.7603 178.6191 193.6582 178.5625 C
193.5679 179.3682 193.5361 176.9141 193.5503 177.9238 C
191.9229 176.6924 190.3232 179.2842 188.6499 176.6699 C
186.9922 175.3096 185.3276 174.1084 183.6909 174.3115 C
182.0244 172.334 180.3574 169.6299 178.7559 170.3398 C
177.126 168.8223 175.5762 171.9248 174.0225 171.6797 C
172.4644 171.0859 170.9409 170.2725 169.4585 168.6865 C
167.9854 167.8076 166.5859 168.5918 165.2271 167.2822 C
165.2598 169.8467 164.9619 172.7568 164.3809 172.9238 C
163.7979 172.6494 162.9731 172.7324 161.9995 173.3926 C
160.9966 171.6787 159.8516 171.0361 158.627 169.209 C
156.811 168.085 154.8584 167.8203 153.0723 168.1436 C
151.2852 168.3496 149.6597 168.8525 148.4912 168.8896 C
146.4844 169.4844 144.4756 172.1953 142.4058 169.7266 C
139.6909 169.9863 137.0347 173.9766 134.313 171.0244 C
131.6787 174.9785 128.9326 168.4268 126.3521 172.2188 C
123.7437 173.8008 121.1035 170.2139 118.5898 173.0879 C
115.4395 178.7383 116.3081 159.334 112.8188 162.084 C
109.2886 161.5049 105.7124 165.2813 102.0752 164.2979 C
100.4629 164.0732 99.0425 163.2344 97.7627 165.5186 C
96.4238 163.125 95.3047 170.1367 94.061 167.3623 C
94.4355 165.0684 94.8608 166.9033 95.1436 165.3916 C
95.2026 164.6533 95.2568 164.0889 95.3076 163.6602 C
95.417 163.5664 95.5229 163.4648 95.6206 163.3311 C
95.6089 162.3877 95.4849 162.166 95.3076 163.6602 C
94.0967 164.6689 92.2563 163.1396 90.6641 161.4326 C
88.9067 157.8164 87.5576 162.6123 87.5435 161.4102 C
87.084 156.9463 86.7051 158.8281 86.2256 156.7803 C
85.7876 157.9561 85.2129 152.3018 84.6138 152.71 C
84.0215 153.6152 78.8735 161.0752 78.0254 161.7197 C
78.5923 159.6045 79.0884 157.7813 79.5259 156.1963 C
82.1016 149.5459 83.8828 140.4141 79.5259 156.1963 C
77.8071 160.6348 75.7363 163.9619 74.9043 158.0244 C
73.9521 162.6348 72.6792 157.6768 71.3022 155.1514 C
70.6587 157.3486 69.9595 157.9971 69.2236 157.5664 C
68.4976 158.0889 67.6704 152.4951 66.9063 153.5469 C
64.6763 153.4043 62.5405 156.5762 60.3325 150.918 C
58.1807 149.7686 56.1001 151.1279 54.064 153.8955 C
51.9941 154.0947 49.9307 152.6133 47.938 155.583 C
45.874 153.0039 43.8882 155.5635 41.8394 153.0127 C
39.834 153.9492 37.8047 152.7988 35.7642 151.8301 C
33.7495 152.9414 31.6733 150.0615 29.5996 149.3799 c
27.5278 148.7275 25.4155 146.9893 23.2598 144.7451 C
21.0869 141.0771 18.9858 146.0713 16.7139 141.4834 C
14.8223 151.1855 12.54 141.9072 10.2397 140.918 C
7.89551 136.7285 5.49023 137.3818 2.96143 136.2656 C
0.471191 138.1729 -2.17432 135.627 -4.87402 134.5518 C
-7.59961 131.623 -10.2949 136.7773 -13.1089 136.2686 C
-15.8267 143.4424 -18.7969 134.4541 -21.6318 137.7305 C
-24.4648 141.3057 -27.4448 134.9902 -30.313 137.1074 C
-33.2026 137.5508 -36.103 136.8652 -38.9438 138.5527 C
-41.8003 138.8691 -44.6309 138.9805 -47.4658 134.4063 C
-49.1611 134.3008 -50.7974 136.9961 -52.5039 133.5898 C
-54.1899 131.624 -55.7485 139.1553 -57.4849 133.2119 C
-58.2651 135.1807 -59.1602 132.1035 -60.0747 131.4102 c
-60.9893 130.7393 -61.9375 131.3906 -62.9268 132.75 C
-64.6167 134.3857 -66.1006 132.6123 -67.5225 133.5293 C
-67.9058 131.6309 -68.2695 131.124 -68.6235 131.4902 c
-68.9775 131.8584 -69.3232 133.0957 -69.6689 134.6797 C
-70.3984 135.0225 -71.1494 135.3389 -71.9912 132.4609 C
-73.0249 130.3213 -73.9829 130.2197 -74.9277 131.0898 C
-75.877 131.6641 -76.7969 134.5146 -77.8198 133.2744 C
-78.3027 134.9023 -78.8203 134.7471 -79.3345 136.3545 C
-79.813 140.7637 -80.3936 138.6533 -80.9951 136.8887 C
-82.1133 139.9941 -83.4624 132.9082 -84.8394 135.5117 C
-85.21 137.8984 -85.4399 135.5723 -85.5752 132.9307 c
-85.7163 129.6855 -85.6592 134.168 -85.6938 131.5527 c
-85.6992 131.2422 -85.7324 128.542 -86.4785 133.1328 C
-88.2847 133.5938 -90.2124 136.4551 -92.2617 133.5244 C
-94.2715 133.9199 -96.4009 128.6953 -98.353 133.5732 C
-98.9053 132.9912 -99.4561 132.2754 -100 131.6172 C
-100 108.7949 L
-98.2144 108.9766 -96.4844 108.6348 -94.874 109.6992 C
-94.042 110.0273 -93.2686 106.6836 -92.3418 107.8496 C
-91.4194 108.71 -90.438 106.7441 -89.1982 109.165 C
-87.9937 108.8984 -86.6436 104.3252 -85.3882 107.958 C
-84.8042 106.4561 -84.1958 110.6768 -83.7856 107.4072 C
-83.3359 107.0498 -82.9868 106.7939 -82.8164 104.4375 C
-81.3555 103.1152 -79.9771 104.2832 -78.666 105.917 C
-77.3667 106.6533 -76.1543 106.4492 -75.0024 104.3184 C
-73.811 105.3008 -72.7119 102.0811 -71.5669 102.374 C
-70.4492 100.5557 -60.2813 112.7148 Y
-58.645 114.7695 -56.2026 108.501 -56.145 113.0664 C
-54.8013 112.1094 -51.0229 102.8018 -49.4551 100.8857 C
-49.3784 100.8652 -49.2915 100.8379 -49.2051 100.8076 C
-47.793 103.917 -46.4805 103.7529 -45.2773 103.4971 C
-44.0503 103.7441 -42.8359 111.6396 -41.9468 107.0234 C
-40.1836 107.2246 -37.606 112.8926 -36.0225 108.5713 C
-34.9844 111.6377 -33.9478 114.4287 -32.9697 111.502 C
-31.9229 114.0771 -30.8447 117.9189 -29.8525 112.9854 C
-27.6602 119.4219 -25.5498 111.124 -23.0884 114.8037 c
-20.4219 118.667 -17.895 112.5664 -15.2529 116.2773 C
-12.6802 114.5527 -10.0786 115.9824 -7.48535 117.4404 C
-4.92334 116.4971 -2.354 116.792 0.226563 118.6641 C
2.87744 125.9297 5.31934 117.2871 7.91602 121.3223 C
10.4805 122.749 13.0732 126.8984 15.5654 123.3203 C
18.0908 122.3936 20.7334 130.9756 23.2002 125.876 C
25.7383 126.4082 28.2222 122.6494 30.8276 128.5889 C
33.3481 127.8877 35.854 125.9346 38.4453 130.5107 C
39.2305 133.4375 40.0278 130.5635 40.9063 129.1904 C
41.7646 126.3223 42.7881 131.7637 43.7319 128.2305 C
45.6855 126.2432 47.8066 128.7227 49.8477 127.0645 C
51.0479 130.46 52.1172 129.7598 53.1099 127.8047 C
54.1567 130.2012 52.937 133.3984 53.8687 134.4961 C
54.7573 132.249 55.6353 132.1992 56.4995 132.6045 C
57.3872 134.6699 58.1948 132.0313 59.0317 131.4463 C
59.8599 130.0859 60.7114 130.4561 61.5693 129.4209 C
62.4834 132.751 63.2852 125.5186 64.2603 128.2334 C
65.8799 128.9355 69.0786 127.1846 70.6978 127.7754 C
72.5269 129.1943 74.2627 126.1328 76.0693 130.4307 C
77.8281 130.8057 79.5547 130.6113 81.3179 133.752 C
83.0278 132.6074 84.8242 138.7988 86.5332 137.3359 C
88.2378 135.5908 92.1543 132.71 93.8989 131.3477 C
95.6577 131.0508 97.4785 133.665 99.3062 133.7109 C
101.1216 132.7285 103.021 135.2637 104.958 136.1279 C
106.873 135.2295 108.8774 137.0273 110.9375 137.5459 C
112.9941 137.748 115.1528 140.1563 117.3389 137.9697 C
119.75 137.5527 122.186 139.1045 124.5962 138.7275 C
127.0151 139.0283 129.4375 139.6631 131.8613 140.6992 C
134.3042 143.082 136.707 142.5498 139.1265 143.5049 C
141.5122 141.9141 143.9321 143.207 146.3755 146.7559 C
147.6392 149.79 148.8042 149.3711 149.9248 148.6182 C
151.0347 147.1357 152.1226 147.0674 153.1943 147.8955 C
155.2476 142.4648 157.3379 148.5557 159.3247 146.3906 C
159.3101 145.2148 160.9839 150.1934 161.7725 148.8936 C
162.5591 147.3389 162.6021 150.8271 163.3501 146.2832 C
165.1768 142.083 167.3887 145.4043 169.7305 145.7451 C
172.0942 147.7764 174.604 148.0732 177.1138 144.8457 C
179.6851 146.5449 182.2515 144.3525 184.7852 145.6748 C
187.2646 142.7305 189.7153 143.7344 191.9731 145.3066 C
194.1768 142.5771 196.2471 145.4736 197.9556 145.1543 C
199.6748 145.7539 201.0161 142.1133 201.9639 142.8281 C
202.772 143.0029 204.3418 139.8096 205.1919 143.3125 C
205.1919 143.3193 205.1924 143.3271 205.1919 143.333 C
205.1948 143.541 205.2017 144.0947 205.2188 145.4473 C
206.3623 145.71 207.4951 145.4912 208.6074 144 C
209.7207 142.627 210.8594 143.5674 211.9785 143.1719 C
214.2207 142.8037 216.4336 141.166 218.6973 143.6572 C
220.9258 143.3857 223.2031 147.2295 225.416 145.9785 C
226.8516 149.2842 228.4102 149.9033 230.0215 148.5596 C
231.666 149.9775 233.3379 147.0918 235.084 150.0547 C
236.7832 149.4795 238.5039 150.3828 240.1348 150.0986 C
241.7715 150.1943 243.2832 146.4072 244.7461 150.6582 C
246.8418 143.748 249.0918 152.2119 251.1816 149.708 C
253.5488 145.8652 255.9941 149.6006 258.3867 149.8223 C
260.7949 151.5635 263.123 147.8906 265.5293 150.9141 C
267.9063 151.9658 270.2891 153.9258 272.623 152.4688 C
274.9531 150.8223 277.2891 150.1133 279.6934 154.6406 C
282.0547 156.1104 284.4004 156.293 286.752 156.6797 C
289.0742 154.958 291.4434 156.7109 293.832 159.4688 C
296.1738 158.9023 298.5859 162.9844 300.9414 162.0742 C
303.3164 162.7363 305.7188 164.6914 308.0996 163.9932 C
310.4629 162.165 312.9355 167.6484 315.334 166.0244 C
317.7832 168.623 320.1797 165.5713 322.6484 166.8057 C
325.3711 166.5283 327.9688 167.5596 330.3164 167.0742 C
332.2871 163.6758 334.3516 167.5293 336.3691 166.6875 C
338.4023 167.1221 340.4512 167.9141 342.4902 166.0156 C
344.5645 166.6807 346.6367 165.2578 348.7676 165.793 C
350.8906 165.4258 353.1113 170.0352 355.2949 167.2178 C
354.7109 167.1455 354.5293 165.5215 354.4766 164.9697 C
356.4961 166.0713 358.3496 169.7803 359.9199 166.8428 C
361.5586 169.2031 362.9688 169.2598 364.1934 170.6855 C
364.1074 163.8379 366.209 170.791 367.5137 170.2891 C
368.8711 174.3047 370.3008 175.8867 372.2734 172.6035 C
372.5332 171.4365 387.043 188.9531 376.3066 173.208 C
375.875 170.75 382.0273 181.498 381.668 176.9658 c
381.3125 172.7773 384.5898 177.7168 384.5313 172.7031 C
384.5332 172.7256 384.5332 172.7256 384.5332 172.6875 c
384.5332 172.6924 384.5313 172.6982 384.5313 172.7031 c
384.5254 172.4268 384.4375 168.541 383.9766 168.5586 C
385.4609 166.4541 386.9746 166.6602 388.5195 169.5537 C
390.1504 170.9863 391.7129 167.4141 393.373 171.1689 C
394.9688 170.0176 393.3047 165.6377 395.7559 168.6826 C
398.9766 168.4961 401.6445 172.5459 404.0449 171.2549 C
406.4648 171.4971 404.4492 169.6367 406.8164 165.6963 C
408.5918 168.0176 410.2207 164.1982 411.8828 167.0928 C
413.5254 168.3008 415.1309 171.083 416.6406 168.8779 C
418.2031 171.0352 419.7051 171.3447 421.1777 170.9619 C
422.6582 171.2334 424.1445 173.6328 425.5859 173.1914 C
427.0684 176.2021 428.4746 173.5918 429.9512 175.9141 C
431.4023 176.4131 432.873 177.5439 434.3496 177.6367 C
435.5391 176.1123 437.0176 181.54 438.5098 180.7832 C
440.0625 184.4707 441.7012 185.4082 443.248 182.1357 C
444.9395 179.4395 446.8008 182.7441 448.6445 183.3789 C
450.0654 183.7354 451.498 184.8828 452.834 184.6201 C
450 209 L
447.1533 210.208 444.1357 206.7012 440.8516 209.0352 C
Bb
1 (Unnamed gradient 47) -100 157.2217 0 552.834 1 0 0 1 0 0 Bg
552.834 0 0 -117.7402 -100 216.2959 Xm
7794 0 0 -117.7402 -7894 216.2959 Bc
552.834 0 0 -117.7402 -100 216.2959 Bm
7794 0 0 -117.7402 452.834 216.2959 Bc
f
0 BB
452.6514 441.6865 m
451.4434 437.2744 448.499 440.1162 446.0693 441.665 C
445.1523 442.0537 443.5703 441.7773 443.5205 438.5459 C
442.0176 436.2256 439.6191 437.6475 437.0068 440.0146 C
434.6934 441.1318 433.2764 438.5488 431.377 438.1006 C
430.1309 434.916 429.125 430.8408 426.4111 434.0605 C
424.3213 436.3232 422.792 436.3369 421.1348 437.0244 C
421.0732 435.749 420.7344 436.4854 419.834 437.7275 C
420.2842 437.417 420.7148 437.2012 421.1348 437.0244 C
421.1582 437.4902 421.1455 438.2139 421.1074 439.2871 C
420.1572 436.376 418.3789 440.3721 418.1689 438.6611 C
418.4678 435.9893 417.8281 437.4951 417.3037 438.3623 C
417.3018 437.4199 417.167 436.54 416.7979 436.6514 C
416.5215 439.3486 416.875 439.0645 417.3037 438.3623 C
417.3008 439.668 417.0381 441.0928 416.7822 440.1563 c
416.3418 438.5635 415.6484 438.8721 415.0352 438.8584 C
415.9805 432.3174 413.9893 438.0605 413.1084 438.3008 C
412.9443 438.9805 413.2275 439.5313 413.8682 438.5684 C
413.7012 439.8643 413.6309 440.7539 413.6152 441.3369 C
412.6162 439.2041 411.75 436.5205 409.584 439.2686 C
409.4561 439.8027 409.3633 440.1943 409.291 440.4873 C
409.291 440.4854 409.248 440.6709 409.1182 441.2139 c
409.0684 441.4199 409.0107 441.6729 408.9316 441.9932 C
407.8271 442.7451 406.9199 442.6084 405.5449 444.4004 C
404.0508 446.7129 404.3594 441.4561 403.0381 443.0127 C
401.585 445.1377 401.3311 442.2568 400.6094 441.3857 C
399.3779 442.6416 399.1602 439.7061 397.8291 441.502 C
395.917 441.958 394.5381 440.5186 393.0469 440.1416 C
392.6006 438.6865 392.0127 437.9893 391.1992 438.4082 c
390.3857 438.8311 389.4766 439.8369 388.7725 440.208 C
386.7832 441.6348 385.9053 438.4102 383.8281 439.5674 C
382.374 438.1104 380.0586 439.6182 378.0313 438.6211 C
377.3516 435.8682 375.4561 438.1992 374.4355 436.9844 C
373.4775 435.4971 372.1299 435.7529 371.1855 434.5342 C
370.5713 437.0967 369.7871 436.9326 368.2979 436.2813 C
365.9121 437.6416 364.3008 434.9043 362.4434 434.0693 C
360.9463 431.7197 359.6367 429.4443 357.9102 431.4951 C
357.3027 429.7373 356.4307 429.0205 355.3838 428.9951 C
354.1006 429.958 353.7559 426.9365 352.2539 428.7373 C
350.5801 426.7578 348.5176 426.2354 346.3135 426.2109 C
345.251 426.0234 343.7607 427.4912 342.8906 426.3125 C
341.9912 425.2568 340.3984 427.0674 340.0068 423.9014 C
337.8584 423.2744 335.3936 424.1592 333.6533 422.9307 C
332.876 422.6338 331.2705 425.8496 330.6016 424.7549 C
329.8613 423.9502 328.3779 425.8506 327.6895 423.5615 C
326.3887 423.8428 323.8945 428.2461 323.4824 424.7969 C
322.5186 426.2451 322.9141 422.2197 321.7012 425.3584 C
321.1553 425.708 320.7344 425.96 319.9883 428.2207 C
318.1689 429.5146 317.0342 428.4268 316.0811 426.8916 C
314.9229 426.2139 313.6299 426.4346 311.9316 428.499 C
310.9434 427.584 309.0352 430.6875 307.9307 430.4316 C
306.3428 432.1934 305.2598 431.8408 303.9639 432.2188 C
302.4629 433.4658 301.4482 432.5049 299.6367 434.5654 C
298.2412 434.8818 296.79 435.1221 295.4717 434.3154 C
294.2861 432.3857 292.5166 436.3408 293.5605 431.9736 C
291.8848 432.9561 290.7803 431.3379 288.9766 432.6553 C
287.417 432.9482 286.1934 431.8486 284.6045 432.5332 C
283.918 429.4424 282.5039 429.6357 281.1855 429.9111 C
279.9844 429.7002 280.6455 422.1709 278.6172 426.6045 C
276.8535 426.4521 275.5742 421.083 272.9033 425.251 C
272.5771 422.3389 272.1865 419.6904 270.4746 422.5098 C
270.0195 420.0693 269.8408 416.415 267.6289 421.1572 C
266.9316 415.043 262.7598 423.0283 261.1172 419.5596 c
259.3105 415.9189 255.2383 421.8105 253.4219 418.3145 C
250.3623 420.0205 248.0342 418.7061 245.7227 417.3643 C
242.8613 418.3213 240.291 418.0947 238.0918 416.3555 C
237.126 409.458 232.5264 417.7822 230.834 413.9736 C
228.543 412.6631 226.8809 408.748 223.4551 412.2246 C
220.6367 413.166 219.9961 405.0098 216.2275 409.9404 C
213.748 409.4834 210.2866 413.1348 209.0459 407.5049 C
206.2856 408.2295 203.2383 410.1514 201.6826 405.8262 C
201.5825 403.042 200.0679 405.8096 198.834 407.1426 C
197.2578 409.9053 197.5215 404.7197 195.6968 408.1221 C
193.2104 410.0615 191.6299 407.7344 189.1313 409.3662 C
188.7173 406.1436 187.4507 406.835 185.958 408.7256 C
185.4614 406.4561 183.251 411.6035 182.5605 410.5723 C
181.1035 412.7412 180.1895 412.8066 179.3989 412.4385 C
178.9863 410.4795 177.5181 413.0205 176.5176 413.5986 C
175.3374 414.9189 174.8857 409.71 173.7524 410.7197 C
173.6187 407.5498 171.0469 414.4893 170.7012 411.9111 C
169.2061 411.2734 165.4961 413.0166 163.9746 412.4873 C
162.439 411.165 159.9141 414.1328 159.0972 410.0576 C
157.3818 409.7354 155.5596 409.957 154.5059 406.9893 C
152.4722 408.1221 151.79 407.1064 149.6807 408.542 C
147.5063 410.249 147.021 404.8564 144.8994 406.1943 C
143.0205 406.5156 141.7817 404.0527 139.9146 404.0488 C
137.8105 405.0264 136.4712 402.6416 134.6899 401.8555 C
132.5063 402.7549 130.8804 401.0781 128.8877 400.624 C
126.8237 400.4746 125.1885 398.2139 122.4131 400.3525 C
119.8345 400.8037 117.7065 399.3682 115.1392 399.7813 C
112.7256 399.5439 110.3901 398.9873 108.1484 398.0479 C
106.2158 395.8174 103.6172 396.3799 101.3633 395.5146 C
98.5259 397.0898 96.3516 395.9023 94.6982 392.5576 C
94.1328 389.6807 92.834 390.1074 91.5015 390.8506 C
90.002 392.292 88.8682 392.3799 87.9653 391.6123 C
84.5444 396.8506 83.8672 391.0664 81.3032 393.1807 C
81.0352 394.3057 80.519 389.5752 79.3926 390.8389 C
78.21 392.3418 79.0078 389.0049 77.1411 393.3691 C
74.2485 397.4268 72.7793 394.2939 70.4541 394.0166 C
68.5166 392.124 66.0088 391.8926 62.6504 395.0342 C
60.4194 393.4619 57.2505 395.6162 54.9668 394.4014 C
51.7075 397.2725 49.4312 396.3633 47.4917 394.9072 C
44.5679 397.5654 43.1392 394.8369 41.3081 395.1787 C
39.6855 394.6416 37.4277 398.1533 36.6265 397.4883 C
35.8374 397.3389 33.4526 400.4287 33.4263 397.0947 C
33.4268 397.0889 33.4302 397.0791 33.4316 397.0732 c
33.4785 396.875 33.605 396.3457 33.915 395.0498 C
32.8022 394.8252 31.5854 395.0586 30.0825 396.5088 C
28.6064 397.8438 27.6636 396.9707 26.4185 397.3711 C
24.0249 397.7725 21.355 399.3848 19.6304 397.0479 C
17.2754 397.3545 15.8633 393.7256 13.2896 394.9697 C
12.6104 391.8369 11.1602 391.2773 9.1792 392.5967 C
7.83057 391.2744 5.41748 394.0713 4.33936 391.2725 C
2.45361 391.8584 0.90332 391.0303 -0.841797 391.3369 C
-2.50049 391.2803 -4.97021 394.9355 -5.44629 390.8984 C
-9.26807 397.5557 -9.53809 389.5049 -12.2871 391.9424 C
-15.6489 395.6709 -17.2603 392.1475 -19.6626 391.9844 C
-21.7178 390.3721 -24.998 393.9346 -26.7373 391.0908 C
-28.9282 390.1348 -30.9019 388.3105 -33.6523 389.7559 C
-36.4453 391.377 -39.0181 392.1064 -40.394 387.8252 C
-42.4663 386.4688 -44.832 386.3438 -47.1528 386.0225 C
-49.9575 387.7197 -51.9678 386.0918 -53.7544 383.502 C
-56.3013 384.0947 -57.7915 380.2393 -60.4316 381.1592 C
-62.7134 380.5771 -64.7085 378.7568 -67.3228 379.4736 C
-70.1953 381.2734 -71.4092 376.0801 -74.2661 377.6826 C
-76.1558 375.2471 -79.3564 378.2197 -81.5957 377.0918 C
-84.459 377.4141 -86.8794 376.4814 -89.4087 376.9951 C
-92.2578 380.2881 -93.4468 376.6436 -95.7227 377.4932 C
-96.7568 377.2979 -97.7725 377.0127 -98.8701 377.0459 C
-98.8701 347.9199 L
-97.5723 349.0088 -96.5757 351.793 -94.1968 348.8379 C
-91.5737 347.2607 -88.6401 344.4639 -87.6885 349.0967 C
-82.168 343.2275 -81.5059 356.5313 -76.8784 352.8701 C
-72.5894 350.6221 -70.2524 356.1563 -66.7461 357.1826 C
-62.8228 356.4658 -59.6504 359.2725 -55.7188 360.0498 C
-54.7437 359.417 -56.1284 365.209 -54.77 362.9707 C
-51.3882 360.0205 -50.458 366.4639 -47.0029 361.4854 C
-43.1572 354.8691 -41.6997 357.3916 -40.0845 358.3838 C
-39.2661 362.709 -35.418 353.501 -34.0913 353.9834 C
-34.3735 361.1914 -31.73 355.2998 -29.0996 348.6045 C
-29.1436 348.7861 -28.7881 348.1592 -28.4795 348.166 c
-28.1724 348.1719 -27.9146 348.8135 -28.1519 351.5273 C
-27.8442 354.5479 -26.7163 353.9209 -25.335 352.2158 c
-23.9194 350.3721 -23.1909 351.3877 -21.4248 348.2432 C
-20.8799 350.2109 -19.3052 348.0527 -18.2231 348.3418 C
-16.4839 345.8857 -15.3569 346.3682 -14.2861 347.6797 C
-12.8276 349.0107 -9.87012 343.9697 -9.72998 350.293 C
-8.86133 353.5137 -7.31152 350.4746 -5.41309 349.4229 C
-4.05176 350.6211 -2.30127 350.4033 -0.863281 351.4902 C
-0.374512 353.001 0.31543 353.667 1.11768 353.8369 c
1.91992 354.0068 2.83545 353.6748 3.77539 353.1846 C
5.42041 353.1963 6.5542 355.1279 7.646 356.8037 C
8.25879 357.3623 8.66406 358.6826 9.20947 359.2773 C
9.73096 359.9775 10.7119 358.623 11.5205 357.8223 C
12.145 359.5186 13.3184 359.1816 14.1943 360.2998 C
15.1177 361.2236 16.0952 362.1299 17.5854 361.0342 C
17.7578 362.9941 18.0962 364.2959 18.4229 365.6758 C
18.5781 367.7705 19.9731 364.7148 20.6885 364.5293 C
22.2476 363.626 24.3208 360.6924 25.3569 362.2178 C
28.334 360.0361 30.1392 362.3369 32.7622 361.0166 C
35.5444 359.0293 37.1738 361.6611 38.8589 364.0693 C
40.0156 363.9609 40.4126 367.0322 41.5518 367.0205 C
42.4741 367.9219 43.6338 367.8584 44.9995 366.9854 C
47.9878 364.1729 49.3921 368.2021 52.3042 366.3574 C
53.1772 364.4258 53.708 363.0664 53.7988 363.1191 C
54.0869 362.3447 53.5254 364.6943 53.7559 363.7285 C
55.1299 364.8701 57.3999 362.3584 58.4888 364.8232 C
59.8633 366.0908 61.2817 367.2061 63.0146 366.9766 C
64.2485 368.833 65.3081 371.3857 67.126 370.6738 C
68.4331 372.0918 70.7759 369.0898 72.313 369.291 C
73.771 369.8262 75.1406 370.5703 76.2803 372.0576 C
77.5806 372.8691 79.2085 372.0898 80.2881 373.3135 C
80.8745 370.8623 81.8848 368.0693 82.521 367.8975 C
83.0547 368.1484 83.9229 368.0498 85.0815 367.3994 C
85.6982 369.0186 86.7202 369.6084 87.5361 371.3311 C
89.1313 372.3682 91.0728 372.5791 92.9863 372.2334 C
94.873 371.999 96.6655 371.4814 97.8745 371.4229 C
100.0801 370.8115 102.8003 368.1748 104.3315 370.4932 C
107.1831 370.1875 110.8774 366.3135 112.9609 369.0811 C
116.623 365.2412 117.8613 371.4541 121.4302 367.7686 C
124.4922 366.2021 126.3394 369.5771 129.6172 366.7725 C
134.2192 361.3037 136.2192 367.5752 140.4697 364.8691 C
143.9585 365.3506 145.1772 367.8096 148.6758 368.6768 C
150.2793 368.8564 151.5356 369.6299 153.4033 367.4189 C
154.2007 369.6816 157.0454 362.9463 157.6528 365.5752 C
156.7134 367.7783 156.7202 366.0322 156.064 367.4854 C
155.8247 368.1914 155.6323 368.7324 155.4775 369.1436 C
155.3428 369.2344 155.209 369.3369 155.0752 369.4658 C
154.8594 370.3662 154.9341 370.5771 155.4775 369.1436 C
156.9648 368.1533 158.4878 369.5752 159.7104 371.1787 C
160.6416 374.5996 163.1865 369.9834 162.9116 371.1348 C
162.3042 375.3975 166.5176 367.4365 166.5151 369.3838 C
167.25 368.25 166.4736 373.6475 167.188 373.2461 C
168.0156 372.3682 167.5254 377.4326 168.5527 376.7979 C
170.1294 373.8643 171.7949 371.208 170.8677 380.2676 C
172.9604 375.8369 173.0703 380.5527 173.8735 382.9424 C
175.0664 380.8262 175.9404 380.1904 176.5938 380.5859 C
177.4668 380.0674 176.9648 385.4072 178.0034 384.3828 C
180.2607 384.4717 183.2217 381.3926 184.125 386.7598 C
186.0566 387.8154 188.5229 386.4717 191.2852 383.7803 C
193.46 383.5439 195.2217 384.9189 197.9888 382.0352 C
199.4849 384.46 202.1445 381.9678 203.6333 384.3662 C
205.9199 383.4268 207.7275 384.4854 209.5913 385.3701 C
211.9287 384.2656 213.3662 386.9756 215.3325 387.584 c
217.3047 388.165 219.0547 389.7822 220.7271 391.8838 C
222.0732 395.3506 225.4404 390.5273 226.667 394.8682 C
230.9541 385.5449 231.0557 394.376 233.1836 395.2744 C
234.5771 399.2344 237.208 398.5566 239.5361 399.5723 C
242.5566 397.6943 244.6602 400.0742 247.1748 401.0459 C
249.2666 403.792 253.2822 398.8008 256.0518 399.2305 C
260.5781 392.3076 261.459 400.8447 265.1641 397.6504 C
268.9395 394.1709 270.4736 400.1514 273.9326 398.0654 C
277.0098 397.5811 279.8232 398.1748 283.1514 396.498 C
286.1631 396.1367 289.1006 395.9707 290.9053 400.2881 C
292.624 400.3525 294.957 397.7393 295.8867 400.9619 C
297.1445 402.8066 300.5654 395.5674 300.9131 401.2197 C
302.1914 399.3174 302.3672 402.2432 303.1396 402.8896 c
303.917 403.5107 305.0479 402.8682 306.3945 401.5459 C
308.5273 399.9443 309.6221 401.6104 311.3047 400.7041 C
311.2402 402.5117 311.4912 402.9873 311.9434 402.6299 c
312.3965 402.2715 313.0508 401.0801 313.7891 399.5596 C
314.6221 399.2148 315.4697 398.8955 315.6387 401.6299 C
316.1836 403.6592 317.1445 403.7354 318.3262 402.8818 C
319.4385 402.3125 321.0742 399.5654 321.8262 400.7295 C
322.7129 399.1641 323.209 399.3008 324.127 397.751 C
325.6846 393.5225 325.7705 395.5283 325.9619 397.2061 C
327.8623 394.21 327.5361 400.9609 329.5781 398.4404 C
330.5361 396.1484 330.2129 398.3711 329.7119 400.8955 c
329.0742 403.9961 330.0977 399.71 329.499 402.2119 c
329.4287 402.5107 328.8115 405.0918 330.6914 400.6846 C
332.6563 400.2021 335.3291 397.4238 336.7275 400.1865 C
338.8848 399.7666 339.8125 404.7197 342.9971 400.0107 C
344.5742 402.0244 345.6758 405.8174 348.4561 401.9326 C
349.3848 405.7988 352.6914 399.0791 353.251 402.7646 C
354.5596 400.7314 356.9219 396.8848 357.3379 401.6035 C
358.5996 399.5586 359.1377 400.6338 359.9033 400.6191 C
361.001 399.2002 361.1748 401.4775 361.9023 401.0264 C
364.3467 400.2705 364.9229 407.7607 368.2881 403.6924 C
370.3105 405.2529 372.8643 404.6865 375.1084 405.1963 C
377.3799 405.6055 378.7129 409.7266 381.5283 407.0986 C
382.9688 410.2217 386.1855 405.376 387.9746 405.6416 C
390.0381 406.4814 393.1074 403.1094 394.7012 405.873 C
395.8828 410.3408 398.5127 408.7197 400.9932 407.6006 C
403.4316 406.6553 406.0977 404.6514 407.3428 408.4414 C
409.9668 406.4473 412.3154 405.4551 413.4121 409.4814 C
414.2617 409.3682 416.2305 408.0146 417.8994 407.9326 C
418.3799 407.6436 418.4756 408.1045 418.3906 409.7451 C
418.1953 411.8584 418.9961 410.2373 419.4863 411.6318 C
419.3799 412.0693 419.6484 411.8057 420.3232 410.7061 C
421.3408 408.1738 421.2373 411.1875 422.374 409.8818 C
422.4678 411.2051 423.3311 409.3271 423.0898 411.6299 C
423.9941 409.1299 423.9023 410.3721 423.4834 412.126 C
426.8125 408.5361 427.957 414.085 430.8467 412.333 C
431.0654 414.8652 432.4336 412.1475 432.7451 413.5898 C
433.6338 412.623 434.3975 411.9092 434.9102 412.1328 C
436.1377 411.7236 435.8154 417.3936 437.8818 413.9014 C
439.0732 412.3691 438.749 413.7305 439.1719 411.9531 C
439.8184 413.5537 441.1797 412.1621 441.7607 414.0391 C
442.6094 414.7998 443.7168 414.4658 444.9531 413.5977 C
446.0313 413.3857 446.75 414.6748 447.5781 415.5088 C
448.3262 416.6729 449.5273 415.9297 450.8838 414.54 C
451.8877 416.252 451.748 416.8389 453.3877 415.8955 C
453.5693 416.4248 453.7627 416.6123 453.9639 416.6211 C
453.9639 440.0195 L
453.4961 440.7031 453.0342 441.3633 452.6514 441.6865 C
Bb
1 (Unnamed gradient 48) -98.8701 395.7734 0 552.834 1 0 0 1 0 0 Bg
552.834 0 0 -107.4854 -98.8701 448.7129 Xm
7795.1299 0 0 -107.4854 -7894 448.7129 Bc
552.834 0 0 -107.4854 -98.8701 448.7129 Bm
7795.1299 0 0 -107.4854 453.9639 448.7129 Bc
f
0 BB
452.0205 444.0005 m
450.8125 439.5884 447.8682 442.4302 445.4385 443.979 C
444.5215 444.3677 442.4404 446.646 442.3906 443.4146 C
440.8877 441.0942 438.4893 442.5161 435.877 444.8833 C
433.5635 446.0005 432.1465 443.4175 430.2471 442.9692 C
429.001 439.7847 427.9951 435.7095 425.2813 438.9292 C
423.1914 441.1919 421.6621 441.2056 420.0049 441.8931 C
419.9434 440.6177 419.6045 441.354 418.7041 442.5962 C
419.1543 442.2856 419.585 442.0698 420.0049 441.8931 C
420.0283 442.3589 420.0156 443.0825 419.9775 444.1558 C
419.0273 441.2446 417.249 445.2407 417.0391 443.5298 C
417.3379 440.8579 416.6982 442.3638 416.1738 443.231 C
416.1719 442.2886 416.0371 441.4087 415.668 441.52 C
415.3916 444.2173 415.7451 443.9331 416.1738 443.231 C
416.1709 444.5366 415.9082 445.9614 415.6523 445.0249 c
415.2119 443.4321 414.5186 443.7407 413.9053 443.7271 C
414.8506 437.186 412.8594 442.9292 411.9785 443.1694 C
411.8145 443.8491 412.0977 444.3999 412.7383 443.437 C
412.5713 444.7329 412.501 445.6226 412.4854 446.2056 C
411.4863 444.0728 410.6201 441.3892 408.4541 444.1372 C
408.3262 444.6714 408.2334 445.063 408.1611 445.356 C
408.1611 445.354 408.1182 445.5396 407.9883 446.0825 c
407.9385 446.2886 407.8809 446.5415 407.8018 446.8618 C
406.6973 447.6138 405.79 447.4771 404.415 449.269 C
402.9209 451.5815 403.2295 446.3247 401.9082 447.8813 C
400.4551 450.0063 400.2012 447.1255 399.4795 446.2544 C
398.248 447.5103 398.0303 444.5747 396.6992 446.3706 C
394.7871 446.8267 393.4082 445.3872 391.917 445.0103 C
391.4707 443.5552 390.8828 442.8579 390.0693 443.2769 c
389.2559 443.6997 388.3467 444.7056 387.6426 445.0767 C
385.6533 446.5034 384.7754 443.2788 382.6982 444.436 C
381.2441 442.979 378.9287 444.4868 376.9014 443.4897 C
376.2217 440.7368 374.3262 443.0679 373.3057 441.853 C
372.3477 440.3657 371 440.6216 370.0557 439.4028 C
369.4414 441.9653 368.6572 441.8013 367.168 441.1499 C
364.7822 442.5103 363.1709 439.7729 361.3135 438.938 C
359.8164 436.5884 358.5068 434.313 356.7803 436.3638 C
356.1729 434.606 355.3008 433.8892 354.2539 433.8638 C
352.9707 434.8267 352.626 431.8052 351.124 433.606 C
349.4502 431.6265 347.3877 431.104 345.1836 431.0796 C
344.1211 430.8921 342.6309 432.3599 341.7607 431.1812 C
340.8613 430.1255 339.2686 431.936 338.877 428.77 C
336.7285 428.1431 334.2637 429.0278 332.5234 427.7993 C
331.7461 427.5024 330.1406 430.7183 329.4717 429.6235 C
328.7314 428.8188 327.248 430.7192 326.5596 428.4302 C
325.2588 428.7114 322.7646 433.1147 322.3525 429.6655 C
321.3887 431.1138 321.7842 427.0884 320.5713 430.2271 C
320.0254 430.5767 319.6045 430.8286 318.8584 433.0894 C
317.0391 434.3833 315.9043 433.2954 314.9512 431.7603 C
313.793 431.0825 312.5 431.3032 310.8018 433.3677 C
309.8135 432.4526 307.9053 435.5562 306.8008 435.3003 C
305.2129 437.062 304.1299 436.7095 302.834 437.0874 C
301.333 438.3345 300.3184 437.3735 298.5068 439.4341 C
297.1113 439.7505 295.6602 439.9907 294.3418 439.1841 C
293.1563 437.2544 291.3867 441.2095 292.4307 436.8423 C
290.7549 437.8247 289.6504 436.2065 287.8467 437.5239 C
286.2871 437.8169 285.0635 436.7173 283.4746 437.4019 C
282.7881 434.311 281.374 434.5044 280.0557 434.7798 C
278.8545 434.5688 279.5156 427.0396 277.4873 431.4731 C
275.7236 431.3208 274.4443 425.9517 271.7734 430.1196 C
271.4473 427.2075 271.0566 424.5591 269.3447 427.3784 C
268.8896 424.938 268.7109 421.2837 266.499 426.0259 C
265.8018 419.9116 261.6299 427.897 259.9873 424.4282 c
258.1807 420.7876 254.1084 426.6792 252.292 423.1831 C
249.2324 424.8892 246.9043 423.5747 244.5928 422.2329 C
241.7314 423.1899 239.1611 422.9634 236.9619 421.2241 C
235.9961 414.3267 231.3965 422.6509 229.7041 418.8423 C
227.4131 417.5317 225.751 413.6167 222.3252 417.0933 C
219.5068 418.0347 218.8662 409.8784 215.0977 414.8091 C
212.6182 414.3521 209.1567 418.0034 207.916 412.3735 C
205.1558 413.0981 202.1084 415.02 200.5527 410.6948 C
200.4526 407.9106 198.938 410.6782 197.7041 412.0112 C
196.1279 414.7739 196.3916 409.5884 194.5669 412.9907 C
192.0806 414.9302 190.5 412.603 188.0015 414.2349 C
187.5874 411.0122 186.3208 411.7036 184.8281 413.5942 C
184.3315 411.3247 182.1211 416.4722 181.4307 415.4409 C
179.9736 417.6099 179.0596 417.6753 178.269 417.3071 C
177.8564 415.3481 176.3882 417.8892 175.3877 418.4673 C
174.2075 419.7876 173.7559 414.5786 172.6226 415.5884 C
172.4888 412.4185 169.917 419.3579 169.5713 416.7798 C
168.0762 416.1421 164.3662 417.8853 162.8447 417.356 C
161.3091 416.0337 158.7842 419.0015 157.9673 414.9263 C
156.252 414.604 154.4297 414.8257 153.376 411.8579 C
151.3423 412.9907 150.6602 411.9751 148.5508 413.4106 C
146.3765 415.1177 145.8911 409.7251 143.7695 411.063 C
141.8906 411.3843 140.6519 408.9214 138.7847 408.9175 C
136.6807 409.895 135.3413 407.5103 133.5601 406.7241 C
131.3765 407.6235 129.7505 405.9468 127.7578 405.4927 C
125.6938 405.3433 124.0586 403.0825 121.2832 405.2212 C
118.7046 405.6724 116.5767 404.2368 114.0093 404.6499 C
111.5957 404.4126 109.2603 403.856 107.0186 402.9165 C
105.0859 400.686 102.4873 401.2485 100.2334 400.3833 C
97.396 401.9585 95.2217 400.771 93.5684 397.4263 C
93.0029 394.5493 91.7041 394.9761 90.3716 395.7192 C
88.8721 397.1606 87.7383 397.2485 86.8354 396.481 C
83.4146 401.7192 82.7373 395.9351 80.1733 398.0493 C
79.9053 399.1743 79.3892 394.4438 78.2627 395.7075 C
77.0801 397.2104 77.8779 393.8735 76.0112 398.2378 C
73.1187 402.2954 71.6494 399.1626 69.3242 398.8853 C
67.3867 396.9927 64.8789 396.7612 61.5205 399.9028 C
59.2896 398.3306 56.1206 400.4849 53.8369 399.27 C
50.5776 402.1411 48.3013 401.2319 46.3618 399.7759 C
43.438 402.4341 42.0093 399.7056 40.1782 400.0474 C
38.5557 399.5103 36.2979 403.022 35.4966 402.3569 C
34.7075 402.2075 32.3228 405.2974 32.2964 401.9634 C
32.2969 401.9575 32.3003 401.9478 32.3018 401.9419 c
32.3486 401.7437 32.4751 401.2144 32.7852 399.9185 C
31.6724 399.6938 30.4556 399.9272 28.9526 401.3774 C
27.4766 402.7124 26.5337 401.8394 25.2886 402.2397 C
22.895 402.6411 20.2251 404.2534 18.5005 401.9165 C
16.1455 402.2231 14.7334 398.5942 12.1597 399.8384 C
11.4805 396.7056 10.0303 396.146 8.04932 397.4653 C
6.70068 396.1431 4.2876 398.9399 3.20947 396.1411 C
1.32373 396.7271 -0.226563 395.8989 -1.97168 396.2056 C
-3.63037 396.1489 -6.1001 399.8042 -6.57617 395.7671 C
-10.3979 402.4243 -10.668 394.3735 -13.417 396.811 C
-16.7788 400.5396 -18.3901 397.0161 -20.7925 396.853 C
-22.8477 395.2407 -26.1279 398.8032 -27.8672 395.9595 C
-30.0581 395.0034 -32.0317 393.1792 -34.7822 394.6245 C
-37.5752 396.2456 -40.1479 396.9751 -41.5239 392.6938 C
-43.5962 391.3374 -45.9619 391.2124 -48.2827 390.8911 C
-51.0874 392.5884 -53.0977 390.9604 -54.8843 388.3706 C
-57.4312 388.9634 -58.9214 385.1079 -61.5615 386.0278 C
-63.8433 385.4458 -65.8384 383.6255 -68.4526 384.3423 C
-71.3252 386.1421 -72.5391 380.9487 -75.396 382.5513 C
-77.2856 380.1157 -80.4863 383.0884 -82.7256 381.9604 C
-85.5889 382.2827 -88.0093 381.3501 -90.5386 381.8638 C
-93.3877 385.1567 -94.5767 381.5122 -96.8525 382.3618 C
-97.8867 382.1665 -98.9023 381.8813 -100 381.9146 C
-100 352.7886 L
-98.7021 353.8774 -97.7056 356.6616 -95.3267 353.7065 C
-92.7036 352.1294 -89.77 349.3325 -88.8184 353.9653 C
-83.2979 348.0962 -82.6357 361.3999 -78.0083 357.7388 C
-73.7192 355.4907 -71.3823 361.0249 -67.876 362.0513 C
-63.9526 361.3345 -60.7803 364.1411 -56.8486 364.9185 C
-55.8735 364.2856 -57.2583 370.0776 -55.8999 367.8394 C
-52.5181 364.8892 -51.5879 371.3325 -48.1328 366.354 C
-44.2871 359.7378 -42.8296 362.2603 -41.2144 363.2524 C
-40.396 367.5776 -36.5479 358.3696 -35.2212 358.8521 C
-35.5034 366.0601 -32.8599 360.1685 -30.2295 353.4731 C
-30.2734 353.6548 -29.918 353.0278 -29.6094 353.0347 c
-29.3022 353.0405 -29.0444 353.6821 -29.2817 356.396 C
-28.9741 359.4165 -27.8462 358.7896 -26.4648 357.0845 c
-25.0493 355.2407 -24.3208 356.2563 -22.5547 353.1118 C
-22.0098 355.0796 -20.4351 352.9214 -19.353 353.2104 C
-17.6138 350.7544 -16.4868 351.2368 -15.416 352.5483 C
-13.9575 353.8794 -11 348.8384 -10.8599 355.1616 C
-9.99121 358.3823 -8.44141 355.3433 -6.54297 354.2915 C
-5.18164 355.4897 -3.43115 355.272 -1.99316 356.3589 C
-1.50439 357.8696 -0.814453 358.5356 -0.012207 358.7056 c
0.790039 358.8755 1.70557 358.5435 2.64551 358.0532 C
4.29053 358.0649 5.42432 359.9966 6.51611 361.6724 C
7.12891 362.231 7.53418 363.5513 8.07959 364.146 C
8.60107 364.8462 9.58203 363.4917 10.3906 362.6909 C
11.0151 364.3872 12.1885 364.0503 13.0645 365.1685 C
13.9878 366.0923 14.9653 366.9985 16.4556 365.9028 C
16.6279 367.8628 16.9663 369.1646 17.293 370.5444 C
17.4482 372.6392 18.8433 369.5835 19.5586 369.3979 C
21.1177 368.4946 23.1909 365.561 24.2271 367.0864 C
27.2041 364.9048 29.0093 367.2056 31.6323 365.8853 C
34.4146 363.8979 36.0439 366.5298 37.729 368.938 C
38.8857 368.8296 39.2827 371.9009 40.4219 371.8892 C
41.3442 372.7905 42.5039 372.7271 43.8696 371.854 C
46.8579 369.0415 48.2622 373.0708 51.1743 371.2261 C
52.0474 369.2944 52.5781 367.9351 52.6689 367.9878 C
52.957 367.2134 52.3955 369.563 52.626 368.5972 C
54 369.7388 56.27 367.2271 57.3589 369.6919 C
58.7334 370.9595 60.1519 372.0747 61.8848 371.8452 C
63.1187 373.7017 64.1782 376.2544 65.9961 375.5425 C
67.3032 376.9604 69.646 373.9585 71.1831 374.1597 C
72.6411 374.6948 74.0107 375.439 75.1504 376.9263 C
76.4507 377.7378 78.0786 376.9585 79.1582 378.1821 C
79.7446 375.731 80.7549 372.938 81.3911 372.7661 C
81.9248 373.0171 82.793 372.9185 83.9517 372.2681 C
84.5684 373.8872 85.5903 374.4771 86.4063 376.1997 C
88.0015 377.2368 89.9429 377.4478 91.8564 377.1021 C
93.7432 376.8677 95.5356 376.3501 96.7446 376.2915 C
98.9502 375.6802 101.6704 373.0435 103.2017 375.3618 C
106.0532 375.0562 109.7476 371.1821 111.8311 373.9497 C
115.4932 370.1099 116.7314 376.3228 120.3003 372.6372 C
123.3623 371.0708 125.2095 374.4458 128.4873 371.6411 C
133.0894 366.1724 135.0894 372.4438 139.3398 369.7378 C
142.8286 370.2192 144.0474 372.6782 147.5459 373.5454 C
149.1494 373.7251 150.4058 374.4985 152.2734 372.2876 C
153.0708 374.5503 155.9155 367.8149 156.5229 370.4438 C
155.5835 372.647 155.5903 370.9009 154.9341 372.354 C
154.6948 373.0601 154.5024 373.6011 154.3477 374.0122 C
154.2129 374.103 154.0791 374.2056 153.9453 374.3345 C
153.7295 375.2349 153.8042 375.4458 154.3477 374.0122 C
155.835 373.022 157.3579 374.4438 158.5806 376.0474 C
159.5117 379.4683 162.0566 374.8521 161.7817 376.0034 C
161.1743 380.2661 165.3877 372.3052 165.3853 374.2524 C
166.1201 373.1187 165.3438 378.5161 166.0581 378.1147 C
166.8857 377.2368 166.3955 382.3013 167.4229 381.6665 C
168.9995 378.7329 170.665 376.0767 169.7378 385.1362 C
171.8306 380.7056 171.9404 385.4214 172.7437 387.811 C
173.9365 385.6948 174.8105 385.0591 175.4639 385.4546 C
176.3369 384.936 175.835 390.2759 176.8735 389.2515 C
179.1309 389.3403 182.0918 386.2612 182.9951 391.6284 C
184.9268 392.6841 187.3931 391.3403 190.1553 388.6489 C
192.3301 388.4126 194.0918 389.7876 196.8589 386.9038 C
198.355 389.3286 201.0146 386.8364 202.5034 389.2349 C
204.79 388.2954 206.5977 389.354 208.4614 390.2388 C
210.7988 389.1343 212.2363 391.8442 214.2026 392.4526 c
216.1748 393.0337 217.9248 394.6509 219.5972 396.7524 C
220.9434 400.2192 224.3105 395.396 225.5371 399.7368 C
229.8242 390.4136 229.9258 399.2446 232.0537 400.1431 C
233.4473 404.103 236.0781 403.4253 238.4063 404.4409 C
241.4268 402.563 243.5303 404.9429 246.0449 405.9146 C
248.1367 408.6606 252.1523 403.6694 254.9219 404.0991 C
259.4482 397.1763 260.3291 405.7134 264.0342 402.519 C
267.8096 399.0396 269.3438 405.02 272.8027 402.9341 C
275.8799 402.4497 278.6934 403.0435 282.0215 401.3667 C
285.0332 401.0054 287.9707 400.8394 289.7754 405.1567 C
291.4941 405.2212 293.8271 402.6079 294.7568 405.8306 C
296.0146 407.6753 299.4355 400.436 299.7832 406.0884 C
301.0615 404.186 301.2373 407.1118 302.0098 407.7583 c
302.7871 408.3794 303.918 407.7368 305.2646 406.4146 C
307.3975 404.813 308.4922 406.479 310.1748 405.5728 C
310.1104 407.3804 310.3613 407.856 310.8135 407.4985 c
311.2666 407.1401 311.9209 405.9487 312.6592 404.4282 C
313.4922 404.0835 314.3398 403.7642 314.5088 406.4985 C
315.0537 408.5278 316.0146 408.604 317.1963 407.7505 C
318.3086 407.1812 319.9443 404.4341 320.6963 405.5981 C
321.583 404.0327 322.0791 404.1694 322.9971 402.6196 C
324.5547 398.3911 324.6406 400.397 324.832 402.0747 C
326.7324 399.0786 326.4063 405.8296 328.4482 403.3091 C
329.4063 401.0171 329.083 403.2397 328.582 405.7642 c
327.9443 408.8647 328.9678 404.5786 328.3691 407.0806 c
328.2988 407.3794 327.6816 409.9604 329.5615 405.5532 C
331.5264 405.0708 334.1992 402.2925 335.5977 405.0552 C
337.7549 404.6353 338.6826 409.5884 341.8672 404.8794 C
343.4443 406.8931 344.5459 410.686 347.3262 406.8013 C
348.2549 410.6675 351.5615 403.9478 352.1211 407.6333 C
353.4297 405.6001 355.792 401.7534 356.208 406.4722 C
357.4697 404.4272 358.0078 405.5024 358.7734 405.4878 C
359.8711 404.0688 360.0449 406.3462 360.7725 405.895 C
363.2168 405.1392 363.793 412.6294 367.1582 408.561 C
369.1807 410.1216 371.7344 409.5552 373.9785 410.0649 C
376.25 410.4741 377.583 414.5952 380.3984 411.9673 C
381.8389 415.0903 385.0557 410.2446 386.8447 410.5103 C
388.9082 411.3501 391.9775 407.978 393.5713 410.7417 C
394.7529 415.2095 397.3828 413.5884 399.8633 412.4692 C
402.3018 411.5239 404.9678 409.52 406.2129 413.3101 C
408.8369 411.3159 411.1855 410.3237 412.2822 414.3501 C
413.1318 414.2368 415.1006 412.8833 416.7695 412.8013 C
417.25 412.5122 417.3457 412.9731 417.2607 414.6138 C
417.0654 416.7271 417.8662 415.106 418.3564 416.5005 C
418.25 416.938 418.5186 416.6743 419.1934 415.5747 C
420.2109 413.0425 420.1074 416.0562 421.2441 414.7505 C
421.3379 416.0737 422.2012 414.1958 421.96 416.4985 C
422.8643 413.9985 422.7725 415.2407 422.3535 416.9946 C
425.6826 413.4048 426.8271 418.9536 429.7168 417.2017 C
429.9355 419.7339 431.3037 417.0161 431.6152 418.4585 C
432.5039 417.4917 433.2676 416.7778 433.7803 417.0015 C
435.0078 416.5923 434.6855 422.2622 436.752 418.77 C
437.9434 417.2378 437.6191 418.5991 438.042 416.8218 C
438.6885 418.4224 440.0498 417.0308 440.6309 418.9077 C
441.4795 419.6685 442.5869 419.3345 443.8232 418.4663 C
444.9014 418.2544 445.6201 419.5435 446.4482 420.3774 C
447.1963 421.5415 448.3975 420.7983 449.7539 419.4087 C
450.7578 421.1206 450.6182 421.7075 452.2578 420.7642 C
452.4395 421.2935 452.6328 421.481 452.834 421.4897 C
453.333 442.3335 L
452.8652 443.0171 452.4033 443.6772 452.0205 444.0005 C
Bb
1 (Unnamed gradient 46) -100 400.6416 0 553.333 1 0 0 1 0 0 Bg
553.333 0 0 -107.4854 -100 453.5815 Xm
7794 0 0 -107.4854 -7894 453.5815 Bc
553.333 0 0 -107.4854 -100 453.5815 Bm
7794 0 0 -107.4854 453.333 453.5815 Bc
f
0 BB
U
U
u
692.9443 479.4067 m
691.7188 474.4063 688.3506 479.9673 687.0088 475.9346 C
685.3408 473.4854 683.5752 471.5889 681.627 470.877 c
679.6738 470.1636 678.2314 466.938 675.8926 468.2051 C
674.0342 467.1362 672.2324 465.8545 669.9453 466.9346 C
668.4658 464.0713 665.7998 466.9922 664.3125 464.0781 C
661.5391 467.4683 659.7822 465.8096 657.6074 466.0635 C
654.8359 469.2554 652.3662 470.8604 650.4385 469.5684 C
649.5537 463.082 646.583 466.7637 644.3262 466.6328 C
643.2842 467.8643 643.8037 461.3887 642.9297 462.0068 C
642.2773 461.5161 641.4004 462.2754 640.1992 464.8379 C
639.4053 461.9209 639.3115 456.165 637.2031 461.542 C
638.1631 450.5054 636.4883 453.7158 634.9004 457.2754 C
633.8711 458.0347 634.3779 451.8535 633.5469 452.9121 C
632.8301 453.3906 633.626 446.8032 632.8857 448.1748 C
632.8955 445.7925 628.6523 455.4644 629.2744 450.249 C
629.5537 448.8438 626.9893 454.4653 626.0684 450.248 C
624.8496 448.2578 623.3291 446.4795 621.8369 447.6729 C
621.9922 447.1694 622.1875 446.5083 622.4277 445.644 C
623.0898 443.8662 623.0771 446.0137 624.0254 443.3232 C
623.4258 440.0781 620.5527 448.3159 619.7617 445.5132 C
617.8848 448.2061 616.6299 447.2358 615.0254 446.9907 C
611.5215 445.8687 610.3086 442.8057 606.8125 442.1631 C
602.5469 445.459 600.5508 437.6445 595.9297 444.4063 C
592.6396 447.8677 590.791 443.6543 587.7227 445.5903 C
584.1406 450.1636 582.9023 442.417 579.2305 447.1987 C
577.1426 443.7437 573.4395 448.5732 570.582 448.958 C
569.0439 446.0679 566.3203 449.3623 564.1104 450.1318 C
562.8984 450.209 561.1025 450.8628 559.2109 451.1631 C
557.2959 451.604 555.3506 451.3511 553.75 450.0703 C
552.9268 447.9312 551.9014 447.2036 551.2793 445.1934 C
550.1191 446.0132 549.249 446.144 548.7129 445.8359 C
548.0752 446.0571 547.0703 449.54 546.4902 452.5928 C
545.4053 451.0806 543.7793 452.0625 542.4727 451.0688 C
541.3262 449.2329 539.9482 448.3262 538.4854 447.6807 C
536.9443 447.4507 534.6104 451.1992 533.2949 449.4609 C
531.4766 450.3682 530.4063 447.2251 529.1611 444.9521 C
527.4268 445.2656 525.998 443.9146 524.6162 442.3779 C
523.5117 439.3604 521.251 442.5039 519.8682 441.1309 C
519.6436 442.3237 520.1982 439.4214 519.9131 440.3804 C
519.8223 440.3169 519.2939 442.0024 518.4297 444.396 C
515.5244 446.7266 514.0957 441.8193 511.1191 445.332 C
509.7578 446.4331 508.5977 446.5366 507.6699 445.459 C
506.5313 445.5029 506.1152 441.7681 504.958 441.9336 C
503.2588 439.0469 501.6113 435.9072 498.8408 438.4131 C
496.2246 440.105 494.4092 437.3892 491.4453 440.1279 C
490.4014 438.3267 488.3447 441.938 486.793 443.0781 C
486.0811 443.3267 484.7021 447.0396 484.5352 444.5347 C
484.2012 442.8931 483.8564 441.3462 483.6738 439.0068 C
482.1914 440.3799 481.2119 439.3359 480.2852 438.2749 C
479.4063 436.9785 478.2373 437.4321 477.6045 435.4434 C
476.8008 436.4351 475.8311 438.0903 475.3066 437.2832 C
474.7588 436.6025 474.3477 435.0557 473.7324 434.4258 C
472.6367 432.4961 471.499 430.2749 469.8604 430.3564 C
468.9248 430.9888 468.0137 431.4331 467.2148 431.2803 c
466.415 431.1274 465.7236 430.3838 465.2295 428.6411 C
463.793 427.4556 462.0547 427.8257 460.6963 426.5195 C
458.8125 427.8779 457.2813 431.5098 456.4082 427.8311 C
456.248 420.498 453.3252 426.564 451.874 425.1392 C
450.8096 423.708 449.6904 423.251 447.9678 426.2056 C
446.8955 425.958 445.334 428.5498 444.792 426.3452 C
444.2754 427.4507 443.8516 428.126 443.4688 428.5933 C
443.3896 346.4409 443.3379 264.2881 443.2646 182.1357 C
443.9893 181.9121 444.7061 181.2939 445.416 179.8994 C
448.1133 174.9229 450.9824 184.043 453.5791 174.6387 C
456.2881 174.083 458.875 167.0127 461.5313 169.3994 C
464.1563 169.6328 466.7471 171.6729 469.1758 168.5518 C
471.6553 168.9814 474.0156 167.3887 476.3457 171.623 C
478.6152 172.0605 480.9199 182.4756 482.7422 170.2949 C
485.0176 175.1113 487.0723 168.5186 489.2559 172.3447 C
491.4131 174.4639 493.5508 176.0078 495.6074 176.3027 c
497.6719 176.5986 499.7783 179.6299 501.793 177.8301 C
503.8477 178.5498 505.8926 179.5234 507.9053 177.9707 C
509.9805 180.6699 511.9707 177.1553 514.0684 179.9434 C
516.0645 175.9395 518.1582 177.3994 520.2539 176.8164 C
522.2988 173.0762 524.4063 171.0703 526.5957 172.1768 C
528.8633 178.8467 531.0137 174.6504 533.2832 174.5557 C
534.0566 173.1572 534.9238 179.9912 535.6592 179.2637 C
536.4082 179.7119 537.1162 178.8311 537.7637 176.0371 C
539.1758 179.0215 540.4922 185.0566 541.4443 179.2422 C
542.3145 186.5381 544.4121 182.2236 546.1504 176.5654 C
545.71 178.5713 545.21 180.876 544.6406 183.5518 C
545.501 182.6807 550.7354 173.0234 551.3359 171.8545 C
551.9492 171.3086 552.5479 178.3135 552.9922 176.8223 C
553.4873 179.3457 553.8711 176.9805 554.3516 182.5176 C
554.3691 184.0146 555.7363 177.9619 557.54 182.3906 C
559.1699 184.4492 561.0527 186.293 562.2881 185 C
562.2363 185.5352 562.1836 186.2412 562.125 187.1621 C
561.8389 189.0547 561.3994 186.7832 561.0205 189.6543 C
562.2959 193.0732 563.4277 184.3008 564.7979 187.2559 C
566.1035 184.3809 567.5566 185.4043 569.2051 185.668 C
572.9258 186.8682 576.5781 182.1855 580.1855 182.9961 C
583.752 179.6543 582.8604 203.8203 586.0791 196.9102 C
588.6445 193.4316 591.3359 198.0381 593.9961 196.2383 C
596.6309 191.6855 599.4199 200.0361 602.1074 195.3584 C
604.874 199.2666 607.5869 194.583 610.3447 194.5703 C
612.4424 197.8623 614.4844 194.751 616.5205 194.2803 C
617.7061 194.3916 619.3535 193.9902 621.1641 193.999 C
622.9727 193.8643 624.9492 194.4912 626.7803 196.1699 C
628.0127 198.6133 629.1641 199.5938 630.1729 201.8691 C
631.1543 201.2227 631.9844 201.2646 632.5713 201.7061 C
633.1582 201.6025 633.4648 198.0967 633.4395 194.9541 C
634.8047 196.8076 636.2168 196.1143 637.6953 197.4756 C
639.1787 199.6982 640.7061 200.9951 642.2637 202.04 C
643.8223 202.6611 645.3848 199.2305 647.0098 201.4297 C
648.6123 200.9268 650.2676 204.583 651.9238 207.3594 C
653.5576 207.4951 655.207 209.3438 656.8516 211.3877 C
658.5039 214.9375 660.1016 212.2266 661.7109 214.1221 C
661.7002 212.9092 661.7207 215.8545 661.8115 214.916 C
661.9131 215.0098 662.1016 213.3643 662.4824 211.0615 C
664.8564 209.4482 667.1846 215.1738 669.3867 212.377 C
670.4912 211.6416 671.5898 211.9209 672.6934 213.3975 C
673.7871 213.7363 674.9043 217.8994 675.9863 218.1279 C
678.1787 221.8242 680.3691 225.7754 682.5469 224.1074 C
684.7324 223.2607 687.001 226.877 689.2998 225.0957 C
690.6455 227.4453 691.9111 224.3838 693.168 223.7803 C
693.7988 223.8086 694.3867 220.3662 695.0313 223.1387 C
695.667 225.0449 696.293 226.8604 696.9229 229.459 C
697.8955 228.7256 699.0615 229.792 700 231.0625 C
700.0674 314.4751 699.9209 397.8472 700 481.2598 C
699.8047 480.8638 699.623 480.4141 699.459 479.8838 C
697.333 478.8564 697.2324 468.6763 692.9443 479.4067 C
Bb
1 (Unnamed gradient 80) 437.5166 324.5889 0 268.4717 0.999203 -0.03992 0.03992 0.999203 -319.0851 344.5658 Bg
268.2577 10.7174 12.3193 -308.3536 431.6631 472.541 Xm
8324.877 332.5941 12.3193 -308.3536 -7893.2139 139.9473 Bc
137.5331 5.4947 12.3193 -308.3536 431.6631 472.541 Bm
130.7247 5.22269 12.3193 -308.3536 569.1963 478.0356 Bm
8324.877 332.5941 12.3193 -308.3536 699.9209 483.2583 Bc
f
0 BB
u
699.458 502.6162 m
697.3252 501.5132 697.2227 490.6694 692.9248 502.1172 C
691.6953 496.7876 688.3193 502.71 686.9707 498.4526 C
685.293 495.873 683.5391 493.8862 681.5615 493.1733 c
679.5898 492.4258 678.1484 489.0986 675.8047 490.4551 C
673.9365 489.3687 672.124 488.0688 669.832 489.2227 C
668.3389 486.2778 665.6729 489.3374 664.1729 486.3604 C
661.3975 489.9014 659.6318 488.2129 657.4512 488.5024 C
654.6807 491.8081 652.209 493.4575 650.2725 492.1611 C
649.3662 485.5708 646.3984 489.3516 644.1338 489.2432 C
643.0938 490.501 643.5977 483.9443 642.7217 484.5806 C
642.0664 484.0942 641.1904 484.876 639.9941 487.4741 C
639.1885 484.5405 639.0791 478.7495 636.9805 484.1899 C
637.9102 473.0664 636.2412 476.3281 634.6592 479.9297 C
633.6299 480.7095 634.1211 474.4902 633.292 475.5688 C
632.5752 476.0615 633.3535 469.4341 632.6162 470.8262 C
632.6191 468.4351 628.3945 478.21 629.0029 472.9756 C
629.2803 471.562 626.7275 477.23 625.7939 473.0298 C
624.5684 471.0615 623.041 469.3154 621.5508 470.5308 C
621.7051 470.0264 621.8984 469.3623 622.1377 468.4956 C
622.7959 466.7109 622.79 468.855 623.7314 466.1499 C
623.123 462.9214 620.2695 471.1919 619.4717 468.4136 C
617.5996 471.1284 616.3389 470.1787 614.7305 469.958 C
611.2227 468.8936 610.001 465.874 606.5039 465.2827 C
602.2422 468.6055 600.2373 460.9053 595.623 467.6201 C
592.3359 471.064 590.4844 466.9194 587.415 468.8428 C
583.8359 473.3677 582.5947 465.7397 578.9229 470.4546 C
576.835 467.0566 573.1299 471.813 570.2705 472.1885 C
568.7354 469.3418 566.0088 472.5791 563.7969 473.3301 C
562.585 473.4023 560.7881 474.0381 558.8965 474.3252 C
556.9785 474.75 555.0313 474.4902 553.4326 473.2173 C
552.6143 471.1021 551.5898 470.3774 550.9707 468.3896 C
549.8096 469.188 548.9395 469.3096 548.4033 469.001 C
547.7666 469.2124 546.7529 472.6421 546.165 475.6509 C
545.083 474.1489 543.4512 475.1055 542.1475 474.1099 C
541.0049 472.2832 539.6309 471.3691 538.1699 470.7124 C
536.6289 470.4653 534.2793 474.1514 532.9688 472.4097 C
531.1465 473.2847 530.085 470.1499 528.8477 467.8706 C
527.1104 468.1528 525.6875 466.7832 524.3096 465.2266 C
523.2178 462.2002 520.9424 465.2847 519.5645 463.8818 C
519.333 465.0679 519.8965 462.1831 519.6064 463.1343 C
519.5166 463.0688 518.9834 464.7383 518.1074 467.1104 C
515.1885 469.3755 513.7813 464.4277 510.7852 467.8809 C
509.415 468.9531 508.2529 469.0313 507.3281 467.9243 C
506.1865 467.9395 505.7881 464.168 504.6279 464.3013 C
502.9395 461.3438 501.3047 458.1118 498.5156 460.5522 C
495.8867 462.1733 494.0762 459.3486 491.0908 462.0278 C
490.0537 460.1548 487.9736 463.7568 486.4102 464.8652 C
485.6934 465.0933 484.2949 468.8452 484.1387 466.2729 C
483.8115 464.5791 483.4727 462.981 483.2998 460.5737 C
481.8057 461.9194 480.8262 460.8071 479.9004 459.6724 C
479.0215 458.2998 477.8457 458.7129 477.2188 456.6304 C
476.4082 457.6128 475.4258 459.2773 474.9023 458.4175 C
474.3545 457.6865 473.9492 456.0654 473.334 455.3799 C
472.2393 453.3223 471.1035 450.9502 469.4531 450.936 C
468.5107 451.5376 467.5928 451.9453 466.7891 451.7368 c
465.9854 451.5283 465.293 450.7109 464.8037 448.856 C
463.3613 447.5205 461.6064 447.7886 460.2412 446.3169 C
458.3379 447.6089 456.7842 451.3394 455.9131 447.3857 C
455.7734 439.6216 452.8086 445.811 451.3447 444.1763 C
450.2715 442.5664 449.1416 441.9746 447.3975 444.9897 C
446.3125 444.6343 444.7344 447.2847 444.1875 444.8687 C
443.6641 446.0112 443.2324 446.7012 442.8457 447.1719 C
442.8457 419.8735 L
444.7471 421.2969 446.6299 423.3325 448.5732 424.0273 C
452.2568 423.5054 455.9307 426.6675 459.9297 427.7285 C
460.7529 427.1172 460.5889 433.1704 461.458 430.8799 C
464.1533 427.96 466.3848 434.8413 468.7354 429.7734 C
471.1357 422.9971 473.0762 425.7593 474.8564 426.9067 C
476.543 431.5391 478.4131 422.0161 479.8076 422.605 C
481.0088 430.2246 482.3818 424.144 483.5781 417.21 C
483.5723 417.3984 482.4189 429.7197 482.7188 429.7446 c
483.0215 429.771 483.4053 430.4644 483.7285 433.3247 C
484.6494 436.5444 485.623 435.9473 486.6221 434.2285 C
487.626 432.3574 488.5459 433.479 489.626 430.2524 C
490.5596 432.3691 491.6563 430.1797 492.7725 430.5493 C
493.9648 428.0522 495.167 428.6328 496.4814 430.0879 C
498.1797 431.5854 500.0313 426.4224 501.4658 433.1279 C
502.9746 436.5942 503.8662 433.4697 505.5039 432.4668 C
507.0791 433.8198 508.7441 433.6963 510.3711 434.9336 C
511.1602 436.5625 513.3408 424.3477 514.1611 424.5742 c
514.9785 424.8027 515.8047 424.5088 516.624 424.0454 C
518.2314 424.1543 519.7354 426.272 521.1436 428.1143 C
521.8594 428.7407 522.5234 430.165 523.1797 430.8271 C
523.834 431.5996 524.5127 430.2261 525.1357 429.4243 C
526.0957 431.2607 527.1709 430.9746 528.2578 432.2109 C
529.3486 433.2446 530.4893 434.2651 531.7197 433.1958 C
532.292 435.2813 532.8896 436.6821 533.4912 438.1631 C
534.0713 440.3906 534.8066 437.2358 535.4668 437.083 C
536.8047 436.2183 538.2295 433.2373 539.5527 434.917 C
542.0098 432.7856 544.2461 435.333 546.5381 434.0933 C
548.8467 432.1528 550.9785 435.04 553.1191 437.6929 C
554.2256 437.6479 555.2432 440.9272 556.3545 440.9805 C
557.4404 441.9927 558.5596 441.998 559.7139 441.1528 C
562.0557 438.3545 564.2529 442.708 566.7188 440.9268 C
567.1748 438.9346 567.4141 437.5273 567.5137 437.5874 C
567.6348 436.7861 567.5703 439.2393 567.5957 438.23 C
569.1729 439.5254 570.875 436.9995 572.4424 439.6777 C
574.0449 441.1021 575.6602 442.3682 577.3047 442.2305 C
578.8906 444.2725 580.4492 447.0405 582.0781 446.395 C
583.6465 447.9756 585.3184 444.9365 586.8613 445.2441 C
588.3936 445.8989 589.8838 446.7725 591.3018 448.415 C
592.7393 449.3525 594.1689 448.624 595.4756 449.9863 C
595.5439 447.4224 595.957 444.5264 596.5439 444.3828 C
597.1162 444.6807 597.9443 444.6299 598.9424 444.0093 C
599.877 445.7607 600.9951 446.4482 602.1465 448.3228 C
603.917 449.5181 605.8574 449.8594 607.6553 449.6074 C
609.4482 449.4727 611.0918 449.0347 612.2617 449.0439 C
614.291 448.5293 616.4053 445.8994 618.375 448.4482 C
621.0986 448.2969 623.9102 444.4155 626.5137 447.4731 C
629.3018 443.6255 631.7861 450.2817 634.5156 446.5952 C
637.1836 445.1172 639.6807 448.8066 642.3057 446.0347 C
645.6777 440.5127 644.04 459.8677 647.6367 457.2578 C
651.1396 457.9771 654.8633 454.3452 658.459 455.4717 C
660.0605 455.7607 661.4473 456.6548 662.8164 454.4233 C
664.0596 456.8677 665.4551 449.9058 666.5889 452.7275 C
666.123 455.0049 665.7705 453.1548 665.4277 454.6533 C
665.3389 455.3892 665.2637 455.9517 665.1963 456.3774 C
665.083 456.4668 664.9727 456.5635 664.8691 456.6943 C
664.8438 457.6372 664.96 457.8638 665.1963 456.3774 C
666.4463 455.418 668.2246 457.0186 669.7471 458.7871 C
671.3604 462.4707 672.8984 457.7324 672.8652 458.9341 C
673.1465 463.4121 673.6006 461.5469 673.998 463.6123 C
674.4824 462.4541 674.833 468.1274 675.4482 467.7427 C
676.0752 466.8623 681.5146 459.6118 682.3877 459.0015 C
681.7383 461.0933 681.1699 462.895 680.6699 464.4609 C
677.832 471.0044 675.6904 480.0586 680.6699 464.4609 C
682.5635 460.0947 684.7646 456.8521 685.3594 462.8174 C
686.4941 458.249 687.5684 463.2539 688.8447 465.8311 C
689.5762 463.6621 690.3008 463.041 691.0176 463.501 C
691.7627 463.0068 692.3691 468.6299 693.1738 467.6094 C
695.3975 467.8398 697.6553 464.7554 699.6387 470.4966 C
699.7588 470.5674 699.8799 470.6274 700 470.6816 C
700 504.0977 L
699.8047 503.6714 699.6221 503.1865 699.458 502.6162 C
Bb
1 (Unnamed gradient 81) 442.8457 460.6538 0 257.1543 1 0 0 1 0 0 Bg
257.1543 0 0 -90.8877 442.8457 506.0977 Xm
8336.8457 0 0 -90.8877 -7894 506.0977 Bc
23.4963 0 0 -90.8877 442.8457 506.0977 Bm
86.1532 0 0 -90.8877 466.3418 506.0977 Bm
147.5047 0 0 -90.8877 552.4951 506.0977 Bm
8336.8457 0 0 -90.8877 700 506.0977 Bc
f
0 BB
445.1133 180.4131 m
447.9551 176.3877 450.9346 187.4248 453.6572 178.6162 C
456.4795 179.2412 459.1826 172.9131 461.9141 176.5068 C
464.6221 177.8291 467.2734 180.9521 469.7705 178.6143 C
472.3057 179.9834 474.7168 179.1807 477.0684 184.3271 C
479.374 185.5381 481.6621 196.9326 483.5586 185.0186 C
485.8369 190.6514 487.9424 184.5205 490.1221 189.0225 C
492.2832 191.7803 494.4004 193.9111 496.4785 194.7158 c
498.5576 195.5518 500.6396 199.0869 502.6582 197.7236 C
504.7041 198.9131 506.7393 200.3271 508.75 199.1729 C
510.8047 202.3076 512.7949 199.165 514.8633 202.3311 C
516.8623 198.6846 518.9307 200.5029 521.0068 200.2588 C
523.0469 196.8604 525.1338 195.1924 527.29 196.6025 C
529.5049 203.5518 531.6445 199.6572 533.8818 199.833 C
534.6475 198.54 535.4775 205.4072 536.2051 204.7686 C
536.9414 205.2959 537.6436 204.499 538.29 201.7998 C
539.6699 204.9014 540.9463 210.9893 541.9004 205.3271 C
542.7344 212.6201 544.8105 208.5361 546.5332 203.083 C
546.0947 205.0322 545.5977 207.2705 545.0293 209.8662 C
545.8799 209.0752 551.041 199.917 551.6348 198.8037 C
552.2363 198.3037 552.8115 205.2451 553.251 203.8018 C
553.7324 206.3174 554.1123 204.0029 554.5723 209.4854 C
554.5869 210.9619 555.9385 205.0752 557.7012 209.5127 C
559.2969 211.6084 561.1426 213.4873 562.3564 212.249 C
562.3057 212.7764 562.252 213.4678 562.1914 214.376 C
561.9092 216.2295 561.4824 213.9795 561.1064 216.7959 C
562.3535 220.2021 563.4756 211.5947 564.8184 214.5303 C
566.1016 211.7275 567.5254 212.7568 569.1416 213.0303 C
572.7891 214.2412 576.375 209.6025 579.9131 210.3154 C
583.4121 206.9365 582.541 230.7627 585.6992 223.8252 C
588.2197 220.2959 590.8672 224.7002 593.4814 222.7588 C
596.0693 218.1006 598.8223 226.1475 601.4629 221.292 C
604.1924 224.915 606.8564 220.0166 609.5781 219.6963 C
611.6523 222.7295 613.667 219.4014 615.6787 218.6689 C
616.8516 218.624 618.4795 218.0068 620.2715 217.7549 C
622.0625 217.3584 624.0205 217.6807 625.8408 219.0635 C
627.0684 221.3037 628.2158 222.0947 629.2227 224.2002 C
630.1973 223.3877 631.0254 223.2861 631.6094 223.624 C
632.1924 223.417 632.4912 219.8447 632.457 216.6963 C
633.8213 218.3057 635.2236 217.3408 636.7012 218.4209 C
638.1875 220.3682 639.7148 221.3662 641.2764 222.0967 C
642.835 222.3955 644.3877 218.5889 646.0215 220.4502 C
647.6279 219.5811 649.2998 222.8994 650.9707 225.3271 C
652.6113 225.0771 654.2793 226.5537 655.9424 228.2236 C
657.6191 231.4326 659.2236 228.251 660.8555 229.7627 C
660.8408 228.5225 660.873 231.5342 660.9639 230.5479 C
661.0645 230.6182 661.249 228.8779 661.627 226.4111 C
664.0254 224.1064 666.4014 229.3428 668.6348 225.7939 C
669.7578 224.7002 670.8789 224.6533 672.0068 225.8408 C
673.123 225.8525 674.2725 229.8271 675.3789 229.7197 C
677.6289 232.8701 679.8789 236.3037 682.1152 233.8135 C
684.3623 232.1826 686.7031 235.1982 689.0811 232.4619 C
690.4727 234.46 691.7813 230.7334 693.0869 229.6045 C
693.7441 229.3877 694.3545 225.4814 695.0244 228.1865 C
695.6855 229.9697 696.3408 231.6611 696.9961 234.1943 C
698.0107 233.0225 699.0215 233.7256 700 234.71 C
700 264.665 L
698.0615 264.9033 696.6201 263.7236 694.5654 264.5859 C
691.6533 266.377 690.209 263.6387 688.6924 261.1211 C
687.5313 261.1494 687.3477 258.0576 686.21 257.9922 C
685.3506 257.0293 684.1904 257.0117 682.7676 257.79 C
679.5928 260.3896 678.4688 256.2734 675.4365 257.9141 C
674.4326 259.7803 673.8105 261.1006 673.7236 261.041 C
673.3828 261.7939 674.1045 259.4893 673.8086 260.4365 C
672.5156 259.2041 670.0781 261.5537 669.1621 259.0186 C
667.8779 257.6602 666.54 256.4502 664.7949 256.5596 C
663.6914 254.623 662.8086 252.0039 660.9473 252.5879 C
659.7393 251.084 657.1973 253.918 655.6777 253.6123 C
654.2588 252.9775 652.9443 252.1406 651.9092 250.5781 C
650.6689 249.6797 648.9902 250.3447 647.998 249.0498 C
647.2432 251.4561 646.0439 254.1729 645.3975 254.2998 C
644.8818 254.0127 644.0088 254.0518 642.8086 254.6211 C
642.3047 252.9639 641.3252 252.3047 640.6299 250.5293 C
639.1104 249.3857 637.1885 249.042 635.2549 249.2549 C
633.3564 249.3594 631.5322 249.752 630.3223 249.7275 C
628.0801 250.1865 625.1855 252.6289 623.8174 250.2109 C
620.9512 250.3203 617 253.9307 615.1113 251.0264 C
611.1934 254.6055 610.3857 248.3223 606.5723 251.7539 C
603.4092 253.1064 601.7979 249.6123 598.335 252.1855 C
593.3682 257.3242 591.8047 250.9307 587.3779 253.3379 C
583.9297 252.6172 582.8828 250.0811 579.4521 248.9746 C
577.8652 248.6855 576.665 247.8271 574.6494 249.9053 C
574.0098 247.5928 570.709 254.1162 570.2842 251.4512 C
571.373 249.3184 571.2451 251.0596 571.999 249.6553 C
572.2881 248.9678 572.5166 248.4414 572.6992 248.042 C
572.8408 247.96 572.9805 247.8672 573.123 247.748 C
573.4004 246.8643 573.3398 246.6484 572.6992 248.042 C
571.1475 248.9277 569.7256 247.4043 568.6162 245.7197 C
567.9229 242.2432 565.0654 246.6738 565.4199 245.5439 C
566.3184 241.333 561.5674 248.9854 561.7041 247.043 C
560.8936 248.124 562.0391 242.792 561.2998 243.1445 C
560.4131 243.9619 561.25 238.9434 560.1816 239.5068 C
558.4072 242.3242 556.5625 244.8604 558.1113 235.8857 C
555.7168 240.1621 555.9326 235.4492 555.2969 233.0107 C
553.96 235.04 553.0439 235.6143 552.4199 235.1748 C
551.5137 235.6318 552.3809 230.3398 551.2744 231.29 C
549.0283 231.0459 545.8633 233.9141 545.3311 228.498 C
543.4766 227.3115 540.9229 228.4824 537.9824 230.9785 C
535.7959 231.0645 534.1338 229.5713 531.1758 232.2578 C
529.8496 229.7363 527.0244 232.0391 525.7041 229.5449 C
523.3584 230.3242 521.6279 229.1445 519.8291 228.1338 C
517.4219 229.0742 516.1738 226.2715 514.2549 225.5293 c
512.3262 224.8145 510.6914 223.0811 509.168 220.8701 C
508.0625 217.3184 504.3721 221.8984 503.4473 217.4844 C
498.5293 226.4902 499.0342 217.6729 496.9736 216.6299 C
495.8555 212.584 493.1846 213.0791 490.9316 211.9063 C
487.7891 213.5723 485.8545 211.0527 483.4121 209.9111 C
481.5146 207.0273 477.1641 211.7305 474.4316 211.1123 C
469.4395 217.707 469.1484 209.1299 465.2324 212.0615 C
461.2256 215.2734 460.1074 209.2012 456.5127 211.0449 C
453.4102 211.3164 450.6436 210.5303 447.208 211.9746 C
445.6729 212.0527 444.1602 212.0791 442.8457 211.5117 C
442.8457 181.7607 L
443.6084 181.8779 444.3662 181.5635 445.1133 180.4131 C
Bb
1 (Unnamed gradient 81) 442.8457 220.2783 0 257.1543 1 0 0 1 0 0 Bg
257.1543 0 0 -97.4639 442.8457 268.377 Xm
8336.8457 0 0 -97.4639 -7894 268.377 Bc
23.4963 0 0 -97.4639 442.8457 268.377 Bm
86.1532 0 0 -97.4639 466.3418 268.377 Bm
147.5047 0 0 -97.4639 552.4951 268.377 Bm
8336.8457 0 0 -97.4639 700 268.377 Bc
f
0 BB
693.1738 467.6094 m
692.3691 468.6299 691.7627 463.0068 691.0176 463.501 C
690.3008 463.041 689.5762 463.6621 688.8447 465.8311 C
687.5684 463.2539 686.4941 458.249 685.3594 462.8174 C
684.7646 456.8521 682.5635 460.0947 680.6699 464.4609 C
681.1699 462.895 681.7383 461.0933 682.3877 459.0015 C
681.5146 459.6118 676.0752 466.8623 675.4482 467.7427 C
674.833 468.1274 674.4824 462.4541 673.998 463.6123 C
673.6006 461.5469 673.1465 463.4121 672.8652 458.9341 C
672.8984 457.7324 671.3604 462.4707 669.7471 458.7871 C
668.2246 457.0186 666.4463 455.418 665.1963 456.3774 C
665.2637 455.9517 665.3389 455.3892 665.4277 454.6533 C
665.7705 453.1548 666.123 455.0049 666.5889 452.7275 C
665.4551 449.9058 664.0596 456.8677 662.8164 454.4233 C
661.4473 456.6548 660.0605 455.7607 658.459 455.4717 C
654.8633 454.3452 651.1396 457.9771 647.6367 457.2578 C
644.04 459.8677 645.6777 440.5127 642.3057 446.0347 C
639.6807 448.8066 637.1836 445.1172 634.5156 446.5952 C
631.7861 450.2817 629.3018 443.6255 626.5137 447.4731 C
623.9102 444.4155 621.0986 448.2969 618.375 448.4482 C
616.4053 445.8994 614.291 448.5293 612.2617 449.0439 C
611.0918 449.0347 609.4482 449.4727 607.6553 449.6074 C
605.8574 449.8594 603.917 449.5181 602.1465 448.3228 C
600.9951 446.4482 599.877 445.7607 598.9424 444.0093 C
597.9443 444.6299 597.1162 444.6807 596.5439 444.3828 C
595.957 444.5264 595.5439 447.4224 595.4756 449.9863 C
594.1689 448.624 592.7393 449.3525 591.3018 448.415 C
589.8838 446.7725 588.3936 445.8989 586.8613 445.2441 C
585.3184 444.9365 583.6465 447.9756 582.0781 446.395 C
580.4492 447.0405 578.8906 444.2725 577.3047 442.2305 C
575.6602 442.3682 574.0449 441.1021 572.4424 439.6777 C
570.875 436.9995 569.1729 439.5254 567.5957 438.23 C
567.5703 439.2393 567.6348 436.7861 567.5137 437.5874 C
567.4141 437.5273 567.1748 438.9346 566.7188 440.9268 C
564.2529 442.708 562.0557 438.3545 559.7139 441.1528 C
558.5596 441.998 557.4404 441.9927 556.3545 440.9805 C
555.2432 440.9272 554.2256 437.6479 553.1191 437.6929 C
550.9785 435.04 548.8467 432.1528 546.5381 434.0933 C
544.2461 435.333 542.0098 432.7856 539.5527 434.917 C
538.2295 433.2373 536.8047 436.2183 535.4668 437.083 C
534.8066 437.2358 534.0713 440.3906 533.4912 438.1631 C
532.8896 436.6821 532.292 435.2813 531.7197 433.1958 C
530.4893 434.2651 529.3486 433.2446 528.2578 432.2109 C
527.1709 430.9746 526.0957 431.2607 525.1357 429.4243 C
524.5127 430.2261 523.834 431.5996 523.1797 430.8271 C
522.5234 430.165 521.8594 428.7407 521.1436 428.1143 C
519.7354 426.272 518.2314 424.1543 516.624 424.0454 C
515.8047 424.5088 514.9785 424.8027 514.1611 424.5742 c
513.3408 424.3477 511.1602 436.5625 510.3711 434.9336 C
508.7441 433.6963 507.0791 433.8198 505.5039 432.4668 C
503.8662 433.4697 502.9746 436.5942 501.4658 433.1279 C
500.0313 426.4224 498.1797 431.5854 496.4814 430.0879 C
495.167 428.6328 493.9648 428.0522 492.7725 430.5493 C
491.6563 430.1797 490.5596 432.3691 489.626 430.2524 C
488.5459 433.479 487.626 432.3574 486.6221 434.2285 C
485.623 435.9473 484.6494 436.5444 483.7285 433.3247 C
483.4053 430.4644 483.0215 429.771 482.7188 429.7446 c
482.4189 429.7197 483.5723 417.3984 483.5781 417.21 C
482.3818 424.144 481.0088 430.2246 479.8076 422.605 C
478.4131 422.0161 476.543 431.5391 474.8564 426.9067 C
473.0762 425.7593 471.1357 422.9971 468.7354 429.7734 C
466.3848 434.8413 464.1533 427.96 461.458 430.8799 C
460.5889 433.1704 460.7529 427.1172 459.9297 427.7285 C
455.9307 426.6675 452.2568 423.5054 448.5732 424.0273 C
446.6299 423.3325 444.7471 421.2969 442.8457 419.8735 C
442.8457 208 L
444.1602 208.5674 445.6729 208.541 447.208 208.4629 C
450.6436 207.0186 453.4102 211.3164 456.5127 211.0449 C
460.1074 209.2012 461.2256 215.2734 465.2324 212.0615 C
469.1484 209.1299 469.4395 217.707 474.4316 211.1123 C
477.1641 211.7305 481.5146 207.0273 483.4121 209.9111 C
485.8545 211.0527 487.7891 213.5723 490.9316 211.9063 C
493.1846 213.0791 495.8555 212.584 496.9736 216.6299 C
499.0342 217.6729 498.5293 226.4902 503.4473 217.4844 C
504.3721 221.8984 508.0625 217.3184 509.168 220.8701 C
510.6914 223.0811 512.3262 224.8145 514.2549 225.5293 c
516.1738 226.2715 517.4219 229.0742 519.8291 228.1338 C
521.6279 229.1445 523.3584 230.3242 525.7041 229.5449 C
527.0244 232.0391 529.8496 229.7363 531.1758 232.2578 C
534.1338 229.5713 535.7959 231.0645 537.9824 230.9785 C
540.9229 228.4824 543.4766 227.3115 545.3311 228.498 C
545.8633 233.9141 549.0283 231.0459 551.2744 231.29 C
552.3809 230.3398 551.5137 235.6318 552.4199 235.1748 C
553.0439 235.6143 553.96 235.04 555.2969 233.0107 C
555.9326 235.4492 555.7168 240.1621 558.1113 235.8857 C
556.5625 244.8604 558.4072 242.3242 560.1816 239.5068 C
561.25 238.9434 560.4131 243.9619 561.2998 243.1445 C
562.0391 242.792 560.8936 248.124 561.7041 247.043 C
561.5674 248.9854 566.3184 241.333 565.4199 245.5439 C
565.0654 246.6738 567.9229 242.2432 568.6162 245.7197 C
569.7256 247.4043 571.1475 248.9277 572.6992 248.042 C
572.5166 248.4414 572.2881 248.9678 571.999 249.6553 C
571.2451 251.0596 571.373 249.3184 570.2842 251.4512 C
570.709 254.1162 574.0098 247.5928 574.6494 249.9053 C
576.665 247.8271 577.8652 248.6855 579.4521 248.9746 C
582.8828 250.0811 583.9297 252.6172 587.3779 253.3379 C
591.8047 250.9307 593.3682 257.3242 598.335 252.1855 C
601.7979 249.6123 603.4092 253.1064 606.5723 251.7539 C
610.3857 248.3223 611.1934 254.6055 615.1113 251.0264 C
617 253.9307 620.9512 250.3203 623.8174 250.2109 C
625.1855 252.6289 628.0801 250.1865 630.3223 249.7275 C
631.5322 249.752 633.3564 249.3594 635.2549 249.2549 C
637.1885 249.042 639.1104 249.3857 640.6299 250.5293 C
641.3252 252.3047 642.3047 252.9639 642.8086 254.6211 C
644.0088 254.0518 644.8818 254.0127 645.3975 254.2998 C
646.0439 254.1729 647.2432 251.4561 647.998 249.0498 C
648.9902 250.3447 650.6689 249.6797 651.9092 250.5781 C
652.9443 252.1406 654.2588 252.9775 655.6777 253.6123 C
657.1973 253.918 659.7393 251.084 660.9473 252.5879 C
662.8086 252.0039 663.6914 254.623 664.7949 256.5596 C
666.54 256.4502 667.8779 257.6602 669.1621 259.0186 C
670.0781 261.5537 672.5156 259.2041 673.8086 260.4365 C
674.1045 259.4893 673.3828 261.7939 673.7236 261.041 C
673.8105 261.1006 674.4326 259.7803 675.4365 257.9141 C
678.4688 256.2734 679.5928 260.3896 682.7676 257.79 C
684.1904 257.0117 685.3506 257.0293 686.21 257.9922 C
687.3477 258.0576 687.5313 261.1494 688.6924 261.1211 C
690.209 263.6387 691.6533 266.377 694.5654 264.5859 C
696.6201 263.7236 698.0615 264.9033 700 264.665 C
700 470.6816 L
699.8799 470.6274 699.7588 470.5674 699.6387 470.4966 C
697.6553 464.7554 695.3975 467.8398 693.1738 467.6094 C
Bb
1 (Unnamed gradient 78) 442.8457 339.3408 0 257.1543 1 0 0 1 0 0 Bg
257.1543 0 0 -267.6631 442.8457 472.6816 Xm
8336.8457 0 0 -267.6631 -7892.6938 472.6816 Bc
18.2749 0 0 -267.6631 444.1514 472.6816 Bm
82.2371 0 0 -267.6631 462.4258 472.6816 Bm
13.0537 0 0 -267.6631 544.6631 472.6816 Bm
14.3587 0 0 -267.6631 557.7168 472.6816 Bm
75.7103 0 0 -267.6631 572.0752 472.6816 Bm
52.2142 0 0 -267.6631 647.7861 472.6816 Bm
8336.8457 0 0 -267.6631 700 472.6816 Bc
f
0 BB
U
U
U
u
*u
0.3 g
0 R
0.4 G
34.5752 273.7598 m
34.5625 274.2393 34.8247 274.4639 35.083 274.5068 c
43.9316 275.9619 L
44.5459 276.0635 44.9063 275.2783 44.9736 274.8672 c
46.7402 264.1299 L
46.8081 263.7188 46.6953 263.3984 46.4365 263.3564 c
35.7461 261.5986 L
35.6172 261.5762 35.4565 261.5498 35.3428 261.833 c
33.7271 265.001 30.0811 265.1865 29.0479 265.0156 c
19.1328 263.3857 L
18.3252 263.252 15.9653 262.6826 16.4185 259.9258 c
16.9009 256.9912 20.7578 257.7461 22.0493 257.959 c
28.2368 258.8564 L
31.4341 259.3818 39.0454 259.4893 41.1089 259.0459 c
43.1172 258.5313 50.2954 257.2422 51.8398 247.8545 c
54.0503 234.418 41.0532 230.3516 36.4341 229.5918 c
27.6826 228.1523 L
24.0332 227.5518 19.8193 228.9678 17.2075 230.5264 c
17.5742 227.0908 L
17.5869 226.6113 17.4121 226.4619 17.186 226.4248 c
6.20557 224.6191 L
5.97949 224.5811 5.84424 224.8008 5.76709 225.2705 c
3.79785 237.2393 L
3.74951 237.5342 3.77881 237.958 4.03711 238.002 c
15.5664 239.8984 L
15.8252 239.9404 16.0254 239.7334 16.1577 239.332 c
17.4404 235.5664 22.7114 236.1924 23.0664 236.251 c
34.7251 238.168 L
35.0801 238.2275 36.96 238.8975 36.6416 240.8359 c
36.2749 243.0654 34.3599 243.4131 33.9082 243.3369 c
24.5225 241.9141 L
22.0361 241.5049 14.3442 241.6855 11.1216 242.7227 c
5.37207 244.6094 1.93164 249.5879 1.24658 253.7539 c
0.28125 259.6211 3.23242 263.6611 4.72852 265.6563 c
6.58008 268.3105 10.6567 270.5488 15.8887 271.4082 c
24.771 272.8701 L
29.2598 273.6084 32.7207 272.1289 34.5903 271.0498 C
34.5752 273.7598 l
b
/BBAccumRotation (0.019205) XT
*U
/BBAccumRotation (0.019205) XT
*u
104.0347 249.9932 m
104.3896 250.0518 104.6865 249.8594 104.7446 249.5059 c
105.9707 242.0547 L
106.0864 241.3506 105.9404 241.0264 105.6177 240.9736 c
86.8857 237.8926 L
86.5952 237.8447 86.3535 238.1055 86.3052 238.3984 c
85.5908 242.7402 L
83.874 238.6611 79.8135 236.7285 78.0693 236.4414 c
70.2856 235.1611 L
64.0527 234.1357 61.2744 237.7158 60.0776 244.9912 c
58.2627 256.0225 L
52.7725 255.1191 L
52.4497 255.0654 52.3564 255.2305 52.3179 255.4658 c
51.1309 262.6826 L
50.9473 263.7988 51.3506 264.165 51.8999 264.2559 c
69.7271 267.1895 L
70.1792 267.2627 70.4082 266.8789 70.6782 265.2363 c
72.7153 252.8555 L
73.5547 247.751 74.481 245.5518 79.2612 246.3389 c
84.0083 247.1191 84.2754 251.1416 83.3003 257.0674 c
82.8086 260.0605 L
76.9624 259.0986 L
76.7363 259.0615 76.5166 259.3867 76.4688 259.6797 c
75.1846 267.4834 L
75.1172 267.8936 75.25 268.0967 75.4761 268.1338 c
94.5625 271.2734 L
94.7568 271.3057 94.9531 270.916 95.0112 270.5645 c
98.5444 249.0889 L
104.0347 249.9932 l
b
/BBAccumRotation (0.019205) XT
*U
/BBAccumRotation (0.019205) XT
*u
132.5518 277.7041 m
134.812 278.0762 138.7549 275.8926 139.498 271.375 c
140.1929 267.1504 138.1563 264.4053 135.8955 264.0322 c
133.667 263.666 131.7754 265.2842 130.7295 266.1973 c
129.6743 267.1689 128.7349 267.4346 127.7012 267.2646 c
126.2476 267.0244 123.7729 264.3281 124.439 260.2803 c
125.5493 253.5322 L
131.1045 254.4463 L
131.3301 254.4844 131.5498 254.1592 131.5977 253.8643 c
132.8721 246.1201 L
132.939 245.709 132.687 245.4258 132.4614 245.3896 c
107.7871 241.3301 L
107.5938 241.2979 107.332 241.6768 107.2842 241.9707 c
106.0098 249.7158 L
105.9517 250.0674 106.1392 250.3389 106.3008 250.3662 c
112.082 251.3174 L
109.9102 264.5186 L
104.3223 263.5996 L
103.9673 263.541 103.7129 263.6797 103.6445 264.0898 c
102.438 271.4248 L
102.3223 272.1289 102.4805 272.5762 102.8042 272.6299 c
121.4712 275.7002 L
121.729 275.7432 121.939 275.4775 121.9873 275.1836 c
122.8374 270.0195 L
123.7168 272.9365 126.5771 276.7217 130.3237 277.3379 C
132.5518 277.7041 l
b
/BBAccumRotation (0.019205) XT
*U
/BBAccumRotation (0.019205) XT
*u
171.7305 284.1494 m
175.897 284.835 185.5015 280.6904 187.2295 270.1875 c
189.0347 259.2158 181.7358 253.374 175.5024 252.3486 c
171.4009 251.6748 165.4966 253.8965 163.7607 256.3838 c
164.7646 250.2813 L
170.3843 251.2061 L
170.6099 251.2432 170.981 251.002 171.019 250.7686 c
172.2646 243.1992 L
172.3613 242.6123 172.2578 242.2334 172.0645 242.2021 c
147.0991 238.0947 L
146.8413 238.0527 146.6377 238.0791 146.5801 238.4326 c
145.2573 246.4688 L
145.1899 246.8799 145.2896 247.0771 145.5156 247.1143 c
151.2651 248.0605 L
147.5386 270.709 L
142.0156 269.8008 L
141.6606 269.7422 141.4063 269.8799 141.3384 270.291 c
140.1318 277.626 L
140.0161 278.3301 140.1743 278.7783 140.4976 278.8311 c
159.1646 281.9023 L
159.4224 281.9443 159.6328 281.6777 159.6807 281.3848 c
160.4819 276.5146 L
161.5107 279.335 164.1733 282.9063 168.792 283.667 C
171.7305 284.1494 l
b
/BBAccumRotation (0.019205) XT
1 D
162.1519 266.3643 m
162.9438 261.5527 165.7388 260.083 168.4844 260.5342 c
170.9702 260.9434 173.0068 263.0869 172.2441 267.7217 c
171.4136 272.7686 168.376 274.5 165.7598 274.0684 c
163.7251 273.7344 161.4565 270.5879 162.1519 266.3643 c
b
/BBAccumRotation (0.019205) XT
*U
/BBAccumRotation (0.019205) XT
*u
0 D
216.8198 291.5684 m
219.0806 291.9395 223.0225 289.7559 223.7661 285.2383 c
224.4609 281.0127 222.4248 278.2676 220.1646 277.8955 c
217.9355 277.5293 216.0439 279.1475 214.998 280.0596 c
213.9434 281.0313 213.0034 281.2969 211.9697 281.1279 c
210.5166 280.8877 208.0425 278.1914 208.708 274.1436 c
209.8184 267.3955 L
215.3726 268.3096 L
215.5986 268.3467 215.8174 268.0215 215.8657 267.7285 c
217.1401 259.9834 L
217.2075 259.5732 216.9556 259.2891 216.7295 259.252 c
192.0557 255.1924 L
191.8618 255.1611 191.6006 255.54 191.5522 255.833 c
190.2778 263.5781 L
190.2202 263.9307 190.4082 264.2021 190.5693 264.2285 c
196.3506 265.1797 L
194.1787 278.3818 L
188.5908 277.4629 L
188.2363 277.4043 187.981 277.543 187.9136 277.9541 c
186.7065 285.2881 L
186.5913 285.9922 186.7495 286.4395 187.0728 286.4932 c
205.7397 289.5635 L
205.998 289.6064 206.208 289.3408 206.2559 289.0469 c
207.106 283.8828 L
207.9858 286.7998 210.8452 290.584 214.5918 291.2012 C
216.8198 291.5684 l
b
/BBAccumRotation (0.019205) XT
*U
/BBAccumRotation (0.019205) XT
*u
252.6885 274.3867 m
252.9463 274.4287 253.166 274.1045 253.2139 273.8105 c
254.4888 266.0654 L
254.5654 265.5967 254.4233 265.4531 254.165 265.4111 c
229.3613 261.3301 L
229.1685 261.2988 228.9517 261.8047 228.9038 262.0986 c
227.6587 269.667 L
227.6006 270.0205 227.7886 270.291 227.9492 270.3184 c
233.6665 271.2568 L
231.4854 284.5195 L
225.9619 283.6094 L
225.6069 283.5527 225.3521 283.6904 225.2842 284.1016 c
224.0771 291.4355 L
223.9619 292.1396 224.0874 292.583 224.4106 292.6357 c
243.1099 295.7119 L
243.3682 295.7539 243.5781 295.4883 243.6265 295.1953 c
247.1978 273.4844 L
252.6885 274.3867 l
b
/BBAccumRotation (0.019205) XT
239.7236 308.2314 m
240.0791 308.29 240.3765 308.0981 240.4819 307.4531 c
241.8145 299.3555 L
241.8721 299.0029 241.8101 298.5703 241.4873 298.5176 c
231.1523 296.8174 L
230.8945 296.7754 230.7236 296.8086 230.6563 297.2188 c
229.2173 305.9619 L
229.1787 306.1968 229.292 306.5161 229.5825 306.5635 C
239.7236 308.2314 l
b
/BBAccumRotation (0.019205) XT
*U
/BBAccumRotation (0.019205) XT
*u
256.7188 265.8311 m
256.5249 265.7988 256.2446 266.2949 256.1963 266.5879 c
254.8838 274.5674 L
254.8257 274.9209 255.0132 275.1914 255.1743 275.2178 c
266.2524 277.04 L
266.3813 277.0615 266.6563 276.8057 266.8105 276.4707 c
267.5293 274.7197 270.3096 274.1533 272.6348 274.5352 c
275.9619 275.083 L
277.2529 275.2949 278.6621 276.0088 278.3721 277.7686 c
278.0635 279.6465 276.5386 279.6367 276.1191 279.5684 c
275.731 279.5049 267.3521 279.0283 266.5991 278.9668 c
261.4092 278.6553 254.1084 280.2861 252.8154 288.1484 c
251.8213 294.1914 257.4551 298.2529 265.4321 299.5654 c
269.5015 300.2344 L
271.7944 300.6113 275.0596 300.123 276.7861 298.9014 c
276.7642 299.4404 276.7871 300.1064 276.7866 300.71 c
276.7813 300.9492 276.8203 301.3184 277.0464 301.355 c
285.7012 302.7793 L
285.8955 302.8115 286.2632 302.3887 286.3496 301.8608 c
287.5762 294.4082 L
287.624 294.1162 287.4238 293.7217 287.2305 293.6895 c
277.4438 292.0801 L
277.3149 292.0586 277.1982 292.1592 276.9897 292.4268 c
276.4985 293.1895 275.502 294.4121 272.5308 293.9238 c
268.332 293.2324 L
266.2334 292.8867 265.4702 292.2793 265.7598 290.5195 c
266.0498 288.7588 267.2544 288.8965 268.8003 288.9707 c
269.7144 289.0615 278.2441 290.041 279.7485 290.1689 c
280.3296 290.2646 289.5464 291.2988 291.0908 281.9102 c
292.4038 273.9297 284.5449 270.2871 279.7329 269.4971 c
274.501 268.6348 L
272.3696 268.2842 268.8149 268.7236 267.8628 269.4717 c
267.4419 268.7998 267.145 268.3896 266.8892 267.9258 c
266.6787 267.5898 266.5044 267.4404 266.2783 267.4043 C
256.7188 265.8311 l
b
/BBAccumRotation (0.019205) XT
*U
/BBAccumRotation (0.019205) XT
*u
316.1982 275.4941 m
309.9014 274.458 295.2134 273.0059 292.7612 287.9102 c
290.3003 302.8726 305.6123 306.1748 307.292 306.4517 c
313.4277 307.4614 L
320.4365 308.6133 331.3916 304.9316 332.9736 295.3086 c
333.1475 294.252 L
333.1963 293.959 333.0313 293.751 332.5146 293.666 c
307.9063 289.6172 L
308.9258 285.0264 312.5684 284.0576 315.668 284.5684 c
318.8652 285.0938 L
321.707 285.5615 324.001 286.54 325.0791 289.6709 c
325.1777 289.8682 325.2881 290.0078 325.3848 290.0234 c
332.9756 291.2725 L
333.2646 291.3203 333.418 290.8027 333.4141 290.6211 c
333.1182 287.3779 331.8633 278.0713 319.752 276.0801 C
316.1982 275.4941 l
b
/BBAccumRotation (0.019205) XT
1 D
317.8154 296.3105 m
316.8486 297.9609 315.2715 299.6885 312.3643 299.2104 c
308.5859 298.5898 307.8838 296.6045 307.5137 294.6152 C
317.8154 296.3105 l
b
/BBAccumRotation (0.019205) XT
*U
/BBAccumRotation (0.019205) XT
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
